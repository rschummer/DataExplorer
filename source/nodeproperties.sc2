*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="nodeproperties.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="1" />

	DataSource = .NULL.
	Height = 0
	Left = 0
	Name = "Dataenvironment"
	Top = 0
	Width = 0

ENDDEFINE

DEFINE CLASS frmnodeproperties AS cfoxform OF "dataexplorerctrls.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="shpOptions" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdOK" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCancel" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: addoptions
		*m: cvtvalue
		*p: omapcollection
		*p: onode
	*</DefinedPropArrayMethod>

	AlwaysOnTop = .T.
	AutoCenter = .T.
	Caption = "Properties"
	Desktop = .T.
	DoCreate = .T.
	Height = 88
	MaxButton = .F.
	MinButton = .F.
	Name = "frmNodeProperties"
	omapcollection = .NULL.
	onode = .NULL.
	Width = 468
	WindowType = 1

	ADD OBJECT 'cmdCancel' AS cfoxbutton WITH ;
		Cancel = .T., ;
		Caption = "Cancel", ;
		Left = 390, ;
		Name = "cmdCancel", ;
		TabIndex = 7, ;
		Top = 55
		*< END OBJECT: ClassLib="dataexplorerctrls.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdOK' AS cfoxbutton WITH ;
		Default = .T., ;
		Left = 314, ;
		Name = "cmdOK", ;
		TabIndex = 6, ;
		Top = 55
		*< END OBJECT: ClassLib="dataexplorerctrls.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'shpOptions' AS cfoxshape WITH ;
		Height = 33, ;
		Left = 6, ;
		Name = "shpOptions", ;
		Tag = "STATIC", ;
		Top = 13, ;
		Width = 455, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="dataexplorerctrls.vcx" BaseClass="shape" />
	
	PROCEDURE addoptions
		* Add dynamic list of options
		LOCAL nTop
		LOCAL nLeft
		LOCAL nMaxWidth
		LOCAL oLabelRef
		LOCAL oOption
		LOCAL cObjName
		LOCAL nTabIndex
		LOCAL oRef
		LOCAL cClassName
		LOCAL cClassLib
		LOCAL cProperty
		LOCAL xValue
		LOCAL i
		LOCAL nOptionNum
		LOCAL nWidth
		LOCAL nOffset
		LOCAL nTopPos
		LOCAL lMoveCheckbox
		LOCAL nLeftAnchor
		
		IF VARTYPE(THIS.oNode) <> 'O'
			RETURN
		ENDIF
		
		m.lMoveCheckbox = .F.
		m.nOffset = THIS.shpOptions.Height
		m.nTopPos = THIS.shpOptions.Top
		
		&& m.nLeft = THIS.lblOptions.Left
		m.nLeftAnchor = 15
		m.nTopAnchor = THIS.shpOptions.Top + 8
		
		m.nLeft = m.nLeftAnchor
		
		m.nMaxWidth = 20
		
		* add in the labels
		m.nOptionNum = 0
		m.nTop = m.nTopAnchor
		FOR EACH oOption IN THIS.oNode.oOptionCollection
			* add in the label
			m.nOptionNum = m.nOptionNum + 1
		
			m.cObjName = "lbl" + TRANSFORM(m.nOptionNum)
			THIS.NewObject(m.cObjName, "cfoxlabel", "DataExplorerCtrls.vcx")
			oLabelRef = EVALUATE("THIS." + m.cObjName)
			oLabelRef.AutoSize = .T.
			oLabelRef.Caption = oOption.OptionCaption
			oLabelRef.Top     = m.nTop + 4
			oLabelRef.Left    = nLeft
			oLabelRef.Tag     = "STATIC"  && prevents it from being moved down
		
			oLabelRef.Visible = .T.
		
			m.cClassName = ALLTRIM(LOWER(oOption.OptionClassName))
			IF m.cClassName = "cfoxcheckbox"
				m.nTop = m.nTop + 17
			ELSE
				m.nTop = m.nTop + 25
			ENDIF
			
			m.nMaxWidth = MAX(m.nMaxWidth, oLabelRef.Width)
		ENDFOR
		
		* create dynamic list of options
		m.nOptionNum = 0
		m.nTabIndex = 1
		m.nTop  = m.nTopAnchor
		m.nLeft = m.nLeft + m.nMaxWidth + 3
		FOR EACH oOption IN THIS.oNode.oOptionCollection
			m.nOptionNum = m.nOptionNum + 1
			oRef = .NULL.
			
			m.cClassName = ALLTRIM(LOWER(oOption.OptionClassName))
			m.cClassLib  = oOption.OptionClassLIb
		
			m.nWidth = 0
			IF EMPTY(m.cClassLib)
				DO CASE
				CASE m.cClassName == "checkbox"
					m.cClassName = "cfoxcheckbox"
		
				CASE m.cClassName == "spinner"
					m.cClassName = "cfoxspinner"
					
				CASE m.cClassName == "textbox"
					m.cClassName = "cfoxtextbox"
		
				CASE m.cClassName == "editbox"
					m.cClassName = "cfoxeditbox"
				ENDCASE
			ENDIF
			
			IF EMPTY(m.cClassName)
				m.cClassName = "cfoxtextbox"
			ENDIF
			IF EMPTY(m.cClassLib)
				m.cClassLib = "DataExplorerCtrls.vcx"
			ENDIF
			
			m.cObjName = "o" + TRANSFORM(m.nOptionNum)
			TRY
				THIS.NewObject(m.cObjName, m.cClassName, m.cClassLib)
				m.oRef = EVALUATE("THIS." + m.cObjName)
			CATCH TO oException
				m.oRef = .NULL.
			ENDTRY
		
			DO CASE
			CASE m.cClassName == "cfoxcheckbox"
				m.nWidth = -1  && autosize
			CASE m.cClassName == "cfoxtextbox"
				m.nWidth = 200
			CASE m.cClassName == "cfoxpassword"
				m.nWidth = 200
			OTHERWISE
				m.nWidth = 0
			ENDCASE
		
			IF VARTYPE(m.oRef) == 'O'
				DO CASE
				CASE m.nWidth == -1 && autosize
					m.oRef.AutoSize = .T.
				CASE m.nWidth > 0
					m.oRef.Width = m.nWidth
				ENDCASE
			
				IF PEMSTATUS(m.oRef, "Caption", 5) AND !PEMSTATUS(m.oRef, "Caption", 1) 
					IF TYPE("THIS.lbl" + TRANSFORM(m.nOptionNum)) == 'O'
						m.oLabelRef = EVALUATE("THIS.lbl" + TRANSFORM(m.nOptionNum))
						m.oLabelRef.Visible = .F.
					ENDIF
					m.oRef.Caption = oOption.OptionCaption
				ENDIF
			
				* add to our mapping collection so we know how to retrieve this option later
				THIS.oMapCollection.Add("THIS.oNode.SetOption([" + m.oOption.OptionName + "], TRANSFORM(THIS." + m.cObjName + '.' + IIF(EMPTY(m.oOption.ValueProperty), "value", m.oOption.ValueProperty) + "))")
		
				FOR m.i = 1 TO m.oOption.oPropertyCollection.Count
					m.cProperty = m.oOption.oPropertyCollection.GetKey(m.i)
					
					TRY
						DO CASE
						CASE m.cProperty == "lowvalue"
							m.xValue = THIS.CvtValue(m.oOption.oPropertyCollection.Item(m.i), m.oRef, m.cProperty, 'N')
							m.oRef.SpinnerLowValue = m.xValue
							m.oRef.KeyboardLowValue = m.xValue
						CASE m.cProperty == "highvalue"
							m.xValue = THIS.CvtValue(m.oOption.oPropertyCollection.Item(m.i), m.oRef, m.cProperty, 'N')
							m.oRef.SpinnerHighValue = m.xValue
							m.oRef.KeyboardHighValue = m.xValue
						OTHERWISE
							IF PEMSTATUS(m.oRef, m.cProperty, 5)
								m.xValue = THIS.CvtValue(m.oOption.oPropertyCollection.Item(m.i), m.oRef, m.cProperty)
								m.oRef.&cProperty = m.xValue
							ENDIF
						ENDCASE
					CATCH TO oException
					ENDTRY
				ENDFOR
				
				IF !EMPTY(m.oOption.ValueProperty)
					m.cProperty = m.oOption.ValueProperty
					m.oRef.&cProperty = THIS.CvtValue(m.oOption.OptionValue, m.oRef, m.cProperty)
				ENDIF
		
				oRef.Top  = m.nTop
				oRef.Left = m.nLeft
		
				oRef.Tag  = "STATIC"  && prevents it from being moved down
				oRef.Visible = .T.
				oRef.TabIndex = m.nTabIndex
				m.nTabIndex = m.nTabIndex + 1
				
				IF oRef.BaseClass == "Checkbox"
					m.lMoveCheckbox = m.lMoveCheckbox OR (m.nLeft + oRef.Width) > (THIS.Width - 10)
				ENDIF
		
				IF m.cClassName == "cfoxcheckbox"
					m.nTop = m.nTop + 17
				ELSE
					m.nTop = m.nTop + 25
				ENDIF
			ENDIF
		ENDFOR
		
		THIS.shpOptions.Height = m.nTop - THIS.shpOptions.Top + 6
		m.nOffset = THIS.shpOptions.Height - m.nOffset
		
		FOR i = 1 TO THIS.ControlCount
			IF m.lMoveCheckbox AND THIS.Controls(m.i).BaseClass == "Checkbox"
				THIS.Controls(m.i).Left = nLeftAnchor
			ENDIF
		
			IF !(THIS.Controls(m.i).Tag == "STATIC")
				IF PEMSTATUS(THIS.Controls(m.i), "Top", 5) AND THIS.Controls(m.i).Top > m.nTopPos
					THIS.Controls(m.i).Top = THIS.Controls(m.i).Top + m.nOffset
				ENDIF
			ENDIF
		ENDFOR
		
		THIS.Height = THIS.Height + m.nOffset
	ENDPROC

	PROCEDURE cvtvalue
		* Given a value, an object reference, and a property,
		* convert the value to the same datatype as the objref.property
		LPARAMETERS cValue, oRef, cProperty, cDataType
		LOCAL cDataType
		LOCAL xValue
		
		IF VARTYPE(m.cDataType) <> 'C' OR EMPTY(m.cDataType)
			m.cDataType = TYPE("m.oRef." + m.cProperty) 
		ENDIF
		
		DO CASE
		CASE m.cDataType == 'N'
			m.xValue = VAL(m.cValue)
		CASE m.cDataType == 'L'
			m.xValue = INLIST(UPPER(m.cValue), 'Y', "YES", ".T.", "T")
		CASE m.cDataType == 'D'
			m.xValue = CTOD(m.cValue)
		CASE m.cDataType == 'T'
			m.xValue = CTOT(m.cValue)
		OTHERWISE
			m.xValue = m.cValue
		ENDCASE
		
		RETURN m.xValue
		
	ENDPROC

	PROCEDURE Init
		LPARAMETERS oNode
		DODEFAULT()
		
		THIS.BorderStyle = 2  && fixed dialog
		
		* for mapping controls back to options
		THIS.oMapCollection = CREATEOBJECT("Collection")
		
		THIS.oNode = oNode
		
		THIS.AddOptions()
		
	ENDPROC

	PROCEDURE saveoptions
		* save dynamic options
		#include "foxpro.h"
		LOCAL cEval
		LOCAL oException
		
		FOR EACH cEval IN THIS.oMapCollection
			TRY
				&cEval
			CATCH TO oException
				MESSAGEBOX("SaveSettings:" + CHR(10) + CHR(10) + oException.Message, MB_ICONSTOP, THIS.Caption)
			ENDTRY
		ENDFOR
		
	ENDPROC

	PROCEDURE cmdCancel.Click
		THIS.Parent.Release()
		
	ENDPROC

	PROCEDURE cmdOK.Click
		* copy options back
		
		THISFORM.Release()
		
	ENDPROC

ENDDEFINE
