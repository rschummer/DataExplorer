*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="dataexplorerctrls.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS cfoxbutton AS commandbutton 		&& Fox Reference application form controls.
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" />

	Caption = "OK"
	FontName = "Tahoma"
	FontSize = 8
	Height = 23
	Name = "cfoxbutton"
	Width = 72

ENDDEFINE

DEFINE CLASS cfoxcheckbox AS checkbox 
 	*< CLASSDATA: Baseclass="checkbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	BackStyle = 0
	Caption = "Check1"
	FontName = "Tahoma"
	FontSize = 8
	Height = 17
	Name = "cfoxcheckbox"
	Value = .F.
	Width = 60

ENDDEFINE

DEFINE CLASS cfoxcombo AS combobox 
 	*< CLASSDATA: Baseclass="combobox" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*p: lrequeryoninit		&& This property determines of the combo's Requery method is called when the object is initialized.
		*a: alist[1,0]		&& This property can be used as the RowSource when using array RowSourceType comboboxes.
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	DisplayCount = 15
	FontName = "Tahoma"
	FontSize = 8
	Height = 21
	lrequeryoninit = .F.		&& This property determines of the combo's Requery method is called when the object is initialized.
	Name = "cfoxcombo"
	Width = 100
	_memberdata = <VFPData>
		<memberdata name="alist" type="property" display="aList"/>
		<memberdata name="lrequeryoninit" type="property" display="lRequeryOnInit"/>
		</VFPData>		&& XML Metadata for customizable properties
	
	PROCEDURE Init
		IF this.lRequeryOnInit 
		   this.Requery()
		ENDIF
		
		RETURN
	ENDPROC

ENDDEFINE

DEFINE CLASS cfoxcontainer AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	BorderWidth = 0
	Height = 131
	Name = "cfoxcontainer"
	Width = 363

ENDDEFINE

DEFINE CLASS cfoxdirectory AS cfoxcontainer OF "dataexplorerctrls.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="txtDirectory" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLocate" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: readonly_assign
		*m: value_access
		*m: value_assign
		*p: cextensions
		*p: lpicture
		*p: readonly		&& Specifies if the user can edit a control, or specifies if a table or view associated with a Cursor object allows updates.
		*p: value		&& Specifies the current state of a control.
	*</DefinedPropArrayMethod>

	cextensions = 
	Height = 21
	Name = "cfoxdirectory"
	Width = 363

	ADD OBJECT 'cmdLocate' AS cfoxbutton WITH ;
		Caption = "...", ;
		Height = 21, ;
		Left = 267, ;
		Name = "cmdLocate", ;
		Top = 0, ;
		Width = 23
		*< END OBJECT: ClassLib="dataexplorerctrls.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'txtDirectory' AS cfoxtextbox WITH ;
		Height = 21, ;
		Left = 0, ;
		Name = "txtDirectory", ;
		Top = 0, ;
		Width = 264
		*< END OBJECT: ClassLib="dataexplorerctrls.vcx" BaseClass="textbox" />
	
	PROCEDURE Init
		DODEFAULT()
		
		THIS.Width = THIS.Width
		
		
	ENDPROC

	PROCEDURE readonly_assign
		LPARAMETERS lReadOnly
		
		THIS.Readonly = m.lReadOnly
		
		THIS.txtDirectory.ReadOnly = THIS.ReadOnly
		THIS.txtDirectory.TabStop  = !THIS.ReadOnly
		THIS.cmdLocate.ReadOnly    = THIS.ReadOnly
		THIS.cmdLocate.TabStop     = !THIS.ReadOnly
		
	ENDPROC

	PROCEDURE Resize
		THIS.cmdLocate.Left = THIS.Width - THIS.cmdLocate.Width
		THIS.txtDirectory.Width = THIS.cmdLocate.Left - 3
		
		
	ENDPROC

	PROCEDURE value_access
		RETURN THIS.txtDirectory.Value
		
	ENDPROC

	PROCEDURE value_assign
		LPARAMETERS cValue
		
		THIS.value = m.cValue
		
		THIS.txtDirectory.Value = m.cValue
		
		
	ENDPROC

	PROCEDURE cmdLocate.Click
		LOCAL cDirectory
		
		m.cDirectory = GETDIR(THIS.Parent.txtDirectory.Value, '', '', 64 + 1)
		IF !EMPTY(m.cDirectory)
			THIS.Parent.txtDirectory.Value = m.cDirectory
		ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS cfoxeditbox AS editbox 
 	*< CLASSDATA: Baseclass="editbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	FontName = "Tahoma"
	FontSize = 8
	Height = 53
	Name = "cfoxeditboz"
	Width = 100

ENDDEFINE

DEFINE CLASS cfoxfieldinfo AS cfoxcontainer OF "dataexplorerctrls.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="txtFieldInfo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLocate" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: cfieldname_assign
		*m: ctablename_assign
		*m: setfieldinfo
		*p: cfieldname
		*p: ctablename
	*</DefinedPropArrayMethod>

	cfieldname = 
	ctablename = 
	Height = 21
	Name = "cfoxfieldinfo"
	Width = 363

	ADD OBJECT 'cmdLocate' AS cfoxbutton WITH ;
		Caption = "...", ;
		Height = 21, ;
		Left = 267, ;
		Name = "cmdLocate", ;
		Top = 0, ;
		Width = 23
		*< END OBJECT: ClassLib="dataexplorerctrls.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'txtFieldInfo' AS cfoxtextbox WITH ;
		Height = 21, ;
		Left = 0, ;
		Name = "txtFieldInfo", ;
		ReadOnly = .T., ;
		TabStop = .F., ;
		Top = 0, ;
		Width = 264
		*< END OBJECT: ClassLib="dataexplorerctrls.vcx" BaseClass="textbox" />
	
	PROCEDURE cfieldname_assign
		LPARAMETERS vNewVal
		*To do: Modify this routine for the Assign method
		THIS.cFieldName = m.vNewVal
		
		THIS.SetFieldInfo()
		
	ENDPROC

	PROCEDURE ctablename_assign
		LPARAMETERS vNewVal
		*To do: Modify this routine for the Assign method
		THIS.cTableName = m.vNewVal
		
		THIS.SetFieldInfo()
		
		
	ENDPROC

	PROCEDURE Init
		DODEFAULT()
		
		THIS.Width = THIS.Width
		
		
	ENDPROC

	PROCEDURE Resize
		THIS.cmdLocate.Left = THIS.Width - THIS.cmdLocate.Width
		THIS.txtClassInfo.Width = THIS.cmdLocate.Left - 3
		
		
	ENDPROC

	PROCEDURE setfieldinfo
		LPARAMETERS cTableName, cFieldName
		
		IF VARTYPE(m.cTableName) == 'C'
			THIS.cTableName  = m.cTableName
		ENDIF
		IF VARTYPE(m.cFieldName) == 'C'
			THIS.cFieldName = m.cFieldName
		ENDIF
		
		
		THIS.txtFieldInfo.Value = JUSTFNAME(THIS.cTableName) + '.' + THIS.cFieldName + " (" + THIS.cTableName + ")"
		
	ENDPROC

	PROCEDURE cmdLocate.Click
		LOCAL ARRAY aClassInfo[1]
		LOCAL ARRAY aVCXInfo[1]
		LOCAL lSuccess
		
		IF EMPTY(THIS.Parent.cTableName) OR !FILE(THIS.Parent.cTableName) 
			m.lSuccess = AGETCLASS(aClassInfo)
		ELSE
			m.lSuccess = AGETCLASS(aClassInfo, THIS.Parent.cTableName, THIS.Parent.cFieldName)
		ENDIF
		
		IF m.lSuccess
			* determine parent and base classes
			m.nCnt = AVCXCLASSES(aVCXInfo, aClassInfo[1])
			FOR m.i = 1 TO m.nCnt
				IF aVCXInfo[m.i, 1] == aClassInfo[2]
					THIS.Parent.cBaseClass   = aVCXInfo[m.i, 2]
					THIS.Parent.cParentClass = aVCXInfo[m.i, 3]
					EXIT
				ENDIF
			ENDFOR
		
			THIS.Parent.SetFieldInfo(aClassInfo[1], aClassInfo[2])
		ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS cfoxfilename AS cfoxcontainer OF "dataexplorerctrls.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="txtFilename" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLocate" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: readonly_assign
		*m: value_access
		*m: value_assign
		*p: cextensions
		*p: lpicture
		*p: readonly		&& Specifies if the user can edit a control, or specifies if a table or view associated with a Cursor object allows updates.
		*p: value		&& Specifies the current state of a control.
	*</DefinedPropArrayMethod>

	cextensions = 
	Height = 21
	Name = "cfoxfilename"
	Width = 363

	ADD OBJECT 'cmdLocate' AS cfoxbutton WITH ;
		Caption = "...", ;
		Height = 21, ;
		Left = 267, ;
		Name = "cmdLocate", ;
		Top = 0, ;
		Width = 23
		*< END OBJECT: ClassLib="dataexplorerctrls.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'txtFilename' AS cfoxtextbox WITH ;
		Height = 21, ;
		Left = 0, ;
		MaxLength = 255, ;
		Name = "txtFilename", ;
		Top = 0, ;
		Width = 264
		*< END OBJECT: ClassLib="dataexplorerctrls.vcx" BaseClass="textbox" />
	
	PROCEDURE Init
		DODEFAULT()
		
		THIS.Resize()
		
		
	ENDPROC

	PROCEDURE readonly_assign
		LPARAMETERS lReadOnly
		
		THIS.Readonly = m.lReadOnly
		
		THIS.txtFilename.ReadOnly = THIS.ReadOnly
		THIS.txtFilename.TabStop  = !THIS.ReadOnly
		THIS.cmdLocate.ReadOnly   = THIS.ReadOnly
		THIS.cmdLocate.TabStop    = !THIS.ReadOnly
		
	ENDPROC

	PROCEDURE Resize
		THIS.cmdLocate.Left = THIS.Width - THIS.cmdLocate.Width
		THIS.txtFilename.Width = THIS.cmdLocate.Left - 3
		
		
	ENDPROC

	PROCEDURE value_access
		RETURN THIS.txtFilename.Value
		
	ENDPROC

	PROCEDURE value_assign
		LPARAMETERS cValue
		
		THIS.value = m.cValue
		
		THIS.txtFilename.Value = m.cValue
		
		
	ENDPROC

	PROCEDURE cmdLocate.Click
		LOCAL cFilename
		
		IF THIS.Parent.lPicture
			m.cFilename = GETPICT(THIS.Parent.cExtensions)
		ELSE
			m.cFilename = GETFILE(THIS.Parent.cExtensions)
		ENDIF
		IF !EMPTY(m.cFilename)
			THIS.Parent.Value = m.cFilename
		ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS cfoxform AS form 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: loadoptions
		*m: saveoptions
		*m: setformposition
		*p: cescape
		*p: coldstatus
		*p: cresourceid
		*p: cresourcename
		*p: ctalk
		*p: cudfparms
		*p: linitform
		*p: ndefaultdockable
		*p: nsys2333
		*p: nsys3054
		*p: oresourceoptions		&& Collection of options to save to Fox Resource file.
	*</DefinedPropArrayMethod>

	AllowOutput = .F.
	Caption = "Form"
	cescape = 
	coldstatus = 
	cresourceid = 
	cresourcename = 
	ctalk = 
	cudfparms = 
	DoCreate = .T.
	Icon = 
	linitform = .T.
	Name = "cfoxform"
	ndefaultdockable = .NULL.
	nsys2333 = 0
	nsys3054 = 0
	oresourceoptions = .NULL.		&& Collection of options to save to Fox Resource file.
	
	PROCEDURE Activate
		SET TALK OFF
		
		** We remember the current status
		THIS.cOldStatus = SET("MESSAGE",1)
		
		THIS.cTalk = "OFF"
		THIS.cEscape = SET("ESCAPE")
		SET ESCAPE OFF
		
		THIS.nSys3054 = INT(VAL(SYS(3054)))
		SYS(3054,0)
		
		THIS.cUDFParms = SET("UDFPARMS")
		SET UDFPARMS TO VALUE
		
		DODEFAULT()
	ENDPROC

	PROCEDURE Deactivate
		** We reset the TALK setting
		LOCAL cTalk, cEscape, cUDFParms
		
		DODEFAULT()
		
		m.cUDFParms = THIS.cUDFParms
		IF !EMPTY(m.cUDFParms)
			SET UDFPARMS TO &cUDFParms
		ENDIF
		
		m.cEscape = THIS.cEscape
		IF !EMPTY(m.cEscape)
			SET ESCAPE &cEscape
		ENDIF
		
		SYS(3054,THIS.nSys3054)
		
		** We reset the old status
		SET MESSAGE TO THIS.cOldStatus 
		
		
		m.cTalk = THIS.cTalk
		IF !EMPTY(m.cTalk)
			SET TALK &cTalk
		ENDIF
		
		** We make sure the screen is activated
		ACTIVATE SCREEN
		
	ENDPROC

	PROCEDURE Destroy
		LOCAL ARRAY aDockInfo[4]
		LOCAL cDockToContainer
		LOCAL nDockToPosition
		LOCAL i
		LOCAL nCnt
		
		THIS.Deactivate()
		
		IF !ISNULL(THIS.oResourceOptions)
			THIS.oResourceOptions.Set("Dockable", THIS.Dockable)
			THIS.oResourceOptions.Set("DockPosition", THIS.DockPosition)
			
			m.cDockToContainer = ''
			m.nDockToPosition  = -1
			IF (THIS.DockPosition == 4 OR THIS.DockPosition == 5)
				* get name of form we're docked to
				m.nCnt = ADOCKSTATE(aDockInfo, 0)
				FOR m.i = 1 TO m.nCnt
					IF UPPER(aDockInfo[m.i, 1]) == UPPER(THIS.Name) AND !EMPTY(aDockInfo[m.i, 4])
						m.nDockToPosition  = aDockInfo[m.i, 3]
						m.cDockToContainer = aDockInfo[m.i, 4]
						EXIT
					ENDIF
				ENDFOR
				
				IF EMPTY(m.cDockToContainer)
					* look at IDE windows and see if we can find one docked to us
					FOR m.i = 1 TO m.nCnt
						IF UPPER(aDockInfo[m.i, 4]) == UPPER(THIS.Name)
							m.nDockToPosition  = aDockInfo[m.i, 3]
							m.cDockToContainer = aDockInfo[m.i, 1]
							EXIT
						ENDIF
					ENDFOR
				ENDIF
				IF UPPER(m.cDockToContainer) == UPPER(_SCREEN.Caption)
					THIS.oResourceOptions.Set("DockPosition", m.nDockToPosition)
				ENDIF
			ENDIF
			THIS.oResourceOptions.Set("DockToPosition", m.nDockToPosition)
			THIS.oResourceOptions.Set("DockToContainer", m.cDockToContainer)
			
			IF THIS.DockPosition == -1
				THIS.oResourceOptions.Set("TOP", THIS.Top)
				THIS.oResourceOptions.Set("LEFT", THIS.Left)
				THIS.oResourceOptions.Set("WIDTH", THIS.Width)
				THIS.oResourceOptions.Set("HEIGHT", THIS.Height)
			ENDIF	
		
		ENDIF
		THIS.SaveOptions()
		
		
		
	ENDPROC

	PROCEDURE Init
		#include "DataExplorer.h"
		DODEFAULT()
		
		SYS(2333, THIS.nSys2333)
		IF !EMPTY(THIS.cResourceID)
			IF EMPTY(THIS.cResourceName)
				THIS.cResourceName = THIS.Name
			ENDIF
			THIS.oResourceOptions = NEWOBJECT("FoxResource", "FoxResource.prg")
			THIS.oResourceOptions.Load(THIS.cResourceID, THIS.cResourceName)
		
			THIS.LoadOptions()
		ENDIF
		THIS.lInitForm = .F.
		
		* THIS.HelpContextID = DATAEXPLORER_HELPID
	ENDPROC

	PROCEDURE Load
		SET CONSOLE OFF
		THIS.cTalk = SET("TALK")
		SET CONSOLE ON
		SET TALK OFF
		
		THIS.nSys2333 = INT(VAL(SYS(2333, 2)))
		SYS(2333, 0)
		
		SET DELETED ON
		
		DODEFAULT()
	ENDPROC

	PROCEDURE loadoptions
		* -- Restore options from Resource file
		LOCAL nDockable
		LOCAL nDockPosition
		LOCAL nDocToPosition
		LOCAL cDocToContainer
		
		IF !ISNULL(THIS.oResourceOptions)
			* -- Dock settings
			m.nDockable = THIS.oResourceOptions.Get("Dockable")
			m.nDockPosition = THIS.oResourceOptions.Get("DockPosition")
			IF VARTYPE(m.nDockPosition) <> 'N'
				m.nDockPosition = -1
			ENDIF
		
			IF VARTYPE(m.nDockable) == 'N'
				IF BETWEEN(m.nDockable, 0, 2) AND THIS.Dockable <> m.nDockable
					THIS.Dockable = m.nDockable
				ENDIF
			ELSE
				IF VARTYPE(THIS.nDefaultDockable) == 'N'
					THIS.Dockable = THIS.nDefaultDockable
				ENDIF
			ENDIF
		
		
			IF THIS.Dockable == 1 
				IF BETWEEN(m.nDockPosition, 0, 3) && supports docking, and is dockable
					THIS.Dock(m.nDockPosition)
				ELSE
					* tab or link docked, so must find window we're docked to
					m.nDockToPosition = THIS.oResourceOptions.Get("DockToPosition")
					m.cDockToContainer = THIS.oResourceOptions.Get("DockToContainer")
		
					IF VARTYPE(m.nDockToPosition) == 'N' AND BETWEEN(m.nDockToPosition, 1, 4) AND ;
					 VARTYPE(m.cDockToContainer) == 'C' AND !EMPTY(m.cDockToContainer) AND ;
					 WEXIST(m.cDockToContainer)
					 	TRY
							DOCK NAME THIS POSITION (m.nDockToPosition) WINDOW (m.cDockToContainer)
						CATCH
							* ignore docking error -- not critical
						ENDTRY
					ENDIF
					
				ENDIF
			ENDIF
			IF !THIS.Docked
				THIS.SetFormPosition()
			ENDIF
		ENDIF
		
		*!*	* -- Restore options from Resource file
		*!*	LOCAL nTop, nLeft, nWidth, nHeight
		*!*	LOCAL nDockPosition, lDocked
		
		*!*	IF !ISNULL(THIS.oResourceOptions)
		*!*		m.nDockPosition = THIS.oResourceOptions.Get("DOCKPOSITION")
		*!*		IF THIS.Dockable <> 0 AND VARTYPE(m.nDockPosition) == 'N' AND BETWEEN(m.nDockPosition, 0, 3)
		*!*			THIS.DOCK(m.nDockPosition)
		*!*		ELSE
		*!*			m.nTop = THIS.oResourceOptions.Get("TOP")
		*!*			IF VARTYPE(m.nTop) == 'N'
		*!*				* make sure we're visible
		*!*				IF !THIS.Desktop
		*!*					IF m.nTop > _SCREEN.Height
		*!*						m.nTop = MAX(_SCREEN.Height - THIS.Height, 0)
		*!*					ELSE
		*!*						IF m.nTop + THIS.Height < 0
		*!*							m.nTop = 0
		*!*						ENDIF
		*!*					ENDIF
		*!*				ENDIF
		
		*!*				THIS.Top = m.nTop
		*!*			ENDIF
		
		*!*			m.nLeft = THIS.oResourceOptions.Get("LEFT")
		*!*			IF VARTYPE(m.nLeft) == 'N'
		*!*				* make sure we're visible
		*!*				IF !THIS.Desktop
		*!*					IF m.nLeft > _SCREEN.Width
		*!*						m.nLeft = MAX(_SCREEN.Width - THIS.Width, 0)
		*!*					ELSE
		*!*						IF m.nLeft + THIS.Width < 0
		*!*							m.nLeft = 0
		*!*						ENDIF
		*!*					ENDIF
		*!*				ENDIF
		
		*!*				THIS.Left = m.nLeft
		*!*			ENDIF
		*!*			
		*!*			IF THIS.BorderStyle == 3 && if sizable
		*!*				m.nHeight = THIS.oResourceOptions.Get("HEIGHT")
		*!*				IF VARTYPE(m.nHeight) == 'N' AND m.nHeight >= 0 && AND BETWEEN(m.nWidth, THIS.MinHeight, THIS.MaxHeight)
		*!*					THIS.Height = m.nHeight
		*!*				ENDIF
		*!*				m.nWidth = THIS.oResourceOptions.Get("WIDTH")
		*!*				IF VARTYPE(m.nWidth) == 'N' AND m.nWidth >= 0 && AND BETWEEN(m.nWidth, THIS.MinWidth, THIS.MaxWidth)
		*!*					THIS.Width = m.nWidth
		*!*				ENDIF
		*!*			ENDIF
		*!*		ENDIF
		
		*!*	ENDIF
		
		
	ENDPROC

	PROCEDURE Moved
		IF !THIS.lInitForm AND !ISNULL(THIS.oResourceOptions) 
			THIS.oResourceOptions.Set("TOP", THIS.Top)
			THIS.oResourceOptions.Set("LEFT", THIS.Left)
			THIS.oResourceOptions.Set("WIDTH", THIS.Width)
			THIS.oResourceOptions.Set("HEIGHT", THIS.Height)
		ENDIF
		
	ENDPROC

	PROCEDURE QueryUnload
		THIS.Deactivate()
		
	ENDPROC

	PROCEDURE saveoptions
		* -- Restore options from Resource file
		IF !ISNULL(THIS.oResourceOptions)
			THIS.oResourceOptions.Save(THIS.cResourceID, THIS.cResourceName)
		ENDIF
		
	ENDPROC

	PROCEDURE setformposition
		LOCAL nTop, nLeft, nWidth, nHeight
		
		IF !ISNULL(THIS.oResourceOptions)
			m.nHeight = THIS.oResourceOptions.Get("HEIGHT")
			IF VARTYPE(m.nHeight) == 'N' AND m.nHeight >= 0 && AND BETWEEN(m.nWidth, THIS.MinHeight, THIS.MaxHeight)
				THIS.Height = m.nHeight
			ENDIF
			m.nWidth = THIS.oResourceOptions.Get("WIDTH")
			IF VARTYPE(m.nWidth) == 'N' AND m.nWidth >= 0 && AND BETWEEN(m.nWidth, THIS.MinWidth, THIS.MaxWidth)
				THIS.Width = m.nWidth
			ENDIF
		
			m.nTop = THIS.oResourceOptions.Get("TOP")
			IF VARTYPE(m.nTop) == 'N'
				* make sure we're visible
				IF !THIS.Desktop
					IF m.nTop > _SCREEN.Height
						m.nTop = MAX(_SCREEN.Height - THIS.Height, 0)
					ELSE
						IF m.nTop + THIS.Height < 0
							m.nTop = 0
						ENDIF
					ENDIF
				ENDIF
		
				THIS.Top = m.nTop
			ENDIF
		
			m.nLeft = THIS.oResourceOptions.Get("LEFT")
			IF VARTYPE(m.nLeft) == 'N'
				* make sure we're visible
				IF !THIS.Desktop
					IF m.nLeft > _SCREEN.Width
						m.nLeft = MAX(_SCREEN.Width - THIS.Width, 0)
					ELSE
						IF m.nLeft + THIS.Width < 0
							m.nLeft = 0
						ENDIF
					ENDIF
				ENDIF
		
				THIS.Left = m.nLeft
			ENDIF
		ENDIF
	ENDPROC

ENDDEFINE

DEFINE CLASS cfoxgrid AS grid 
 	*< CLASSDATA: Baseclass="grid" Timestamp="" Scale="Pixels" Uniqueid="" />

	Height = 200
	Name = "cfoxgrid"
	Width = 320

ENDDEFINE

DEFINE CLASS cfoximage AS image 
 	*< CLASSDATA: Baseclass="image" Timestamp="" Scale="Pixels" Uniqueid="" />

	BackStyle = 0
	Height = 16
	Name = "cfoximage"
	Width = 16

ENDDEFINE

DEFINE CLASS cfoxlabel AS label 
 	*< CLASSDATA: Baseclass="label" Timestamp="" Scale="Pixels" Uniqueid="" />

	BackStyle = 0
	Caption = "Label1"
	FontName = "Tahoma"
	FontSize = 8
	Height = 15
	Name = "cfoxlabel"
	Width = 40

ENDDEFINE

DEFINE CLASS cfoxlistbox AS listbox 
 	*< CLASSDATA: Baseclass="listbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*p: lrequeryoninit		&& This property determines of the listbox's Requery method is called when the object is initialized.
		*a: alist[1,0]		&& This property can be used as the RowSource when using array RowSourceType listboxes.
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	FontName = "Tahoma"
	FontSize = 8
	Height = 186
	IntegralHeight = .T.
	lrequeryoninit = .F.		&& This property determines of the listbox's Requery method is called when the object is initialized.
	Name = "cfoxlistbox"
	Width = 329
	_memberdata = <VFPData>
		<memberdata name="alist" type="property" display="aList"/>
		<memberdata name="lrequeryoninit" type="property" display="lRequeryOnInit"/>
		</VFPData>		&& XML Metadata for customizable properties
	
	PROCEDURE Init
		IF this.lRequeryOnInit 
		   this.Requery()
		ENDIF
		
		RETURN
	ENDPROC

ENDDEFINE

DEFINE CLASS cfoxoptionbutton AS optionbutton 
 	*< CLASSDATA: Baseclass="optionbutton" Timestamp="" Scale="Pixels" Uniqueid="" />

	Caption = "Option1"
	FontName = "Tahoma"
	FontScript = 0
	FontSize = 8
	Height = 17
	Name = "foxoptionbutton"
	Width = 61

ENDDEFINE

DEFINE CLASS cfoxoptiongroup AS optiongroup 
 	*< CLASSDATA: Baseclass="optiongroup" Timestamp="" Scale="Pixels" Uniqueid="" />

	BackStyle = 0
	BorderStyle = 0
	ButtonCount = 1
	Height = 28
	MemberClass = "cfoxoptionbutton"
	MemberClassLibrary = dataexplorerctrls.vcx
	Name = "cfoxoptiongroup"
	Value = 0
	Width = 215
	Cfoxoptionbutton1.Left = 5
	Cfoxoptionbutton1.Name = "Cfoxoptionbutton1"
	Cfoxoptionbutton1.Top = 5

ENDDEFINE

DEFINE CLASS cfoxpage AS page 
 	*< CLASSDATA: Baseclass="page" Timestamp="" Scale="Pixels" Uniqueid="" />

	Caption = "New Page"
	FontCharSet = 0
	FontName = "Tahoma"
	FontSize = 8
	Height = 153
	Name = "cfoxpage"
	Width = 290

ENDDEFINE

DEFINE CLASS cfoxpageframe AS pageframe 
 	*< CLASSDATA: Baseclass="pageframe" Timestamp="" Scale="Pixels" Uniqueid="" />

	ActivePage = 1
	ErasePage = .T.
	Height = 169
	MemberClass = "cfoxpage"
	MemberClassLibrary = dataexplorerctrls.vcx
	Name = "cfoxpageframe"
	PageCount = 1
	TabStyle = 1
	Width = 241
	cfoxpage1.Name = "cfoxpage1"

ENDDEFINE

DEFINE CLASS cfoxpassword AS cfoxtextbox OF "dataexplorerctrls.vcx" 
 	*< CLASSDATA: Baseclass="textbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	Name = "cfoxpassword"
	PasswordChar = "*"
	Width = 150

ENDDEFINE

DEFINE CLASS cfoxshape AS shape 
 	*< CLASSDATA: Baseclass="shape" Timestamp="" Scale="Pixels" Uniqueid="" />

	BackStyle = 0
	Height = 17
	Name = "cfoxshape"
	SpecialEffect = 0
	Style = 3
	Width = 100

ENDDEFINE

DEFINE CLASS cfoxspinner AS spinner 
 	*< CLASSDATA: Baseclass="spinner" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*p: _memberdata
	*</DefinedPropArrayMethod>

	FontCharSet = 0
	FontName = "Tahoma"
	FontSize = 8
	Format = "K"
	Height = 21
	Name = "cfoxspinner"
	Width = 70
	_memberdata = <VFPData>

		</VFPData>

ENDDEFINE

DEFINE CLASS cfoxtextbox AS textbox 
 	*< CLASSDATA: Baseclass="textbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	FontName = "Tahoma"
	FontSize = 8
	Format = "KT"
	Height = 21
	Name = "cfoxtextbox"
	Width = 100

ENDDEFINE

DEFINE CLASS cquerygrid AS cfoxgrid OF "dataexplorerctrls.vcx" 
 	*< CLASSDATA: Baseclass="grid" Timestamp="" Scale="Pixels" Uniqueid="" />

	MemberClass = "CQueryColumn"
	MemberClassLibrary = dataexplorercolumn.prg
	Name = "cquerygrid"

ENDDEFINE
