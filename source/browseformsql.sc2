*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="browseformsql.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="1" />

	DataSource = .NULL.
	Height = 0
	Left = 0
	Name = "Dataenvironment"
	Top = 0
	Width = 0

ENDDEFINE

DEFINE CLASS frmbrowseform AS cfoxform OF "dataexplorerctrls.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="chkDeleted" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdBrowse" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdQuery" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdSave" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCancel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblFilter" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtFilter" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="imgClearFilter" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: addfieldtofilter		&& Double-clicking on column header adds field to filter.
		*m: cancelchanges		&& Cancel changes to data.
		*m: datachanged		&& Detect if changes were made and give user opportunity to cancel operation before losing them.
		*m: lshowdeleted_assign
		*m: orderbycolumn		&& Order data by selected column.
		*m: querydata		&& Query data.
		*m: savechanges		&& Save changes to data.
		*m: setcolumnsreadonly		&& This method is called after the grid recordsource is set to determine which columns need to be read-only (like autoincrementing integers).
		*p: colddeleted		&& This property retains the initial SET("Deleted") so it can be reset when the form is closed.
		*p: cowner		&& SQL database owner.
		*p: ctable		&& SQL table to browse.
		*p: lshowdeleted		&& This property determines if the deleted records from the browse recordsource are displayed.
		*p: nsqlhandle		&& SQL Server Connection Handle.
		*p: oca		&& Data explorer cursor adapter.
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	AlwaysOnTop = .T.
	BindControls = .F.
	Caption = "Browse"
	colddeleted = 		&& This property retains the initial SET("Deleted") so it can be reset when the form is closed.
	cowner = 		&& SQL database owner.
	cresourceid = DATAEXPLORER
	ctable = 		&& SQL table to browse.
	Desktop = .T.
	DoCreate = .T.
	Height = 302
	KeyPreview = .T.
	Left = 1
	lshowdeleted = .T.		&& This property determines if the deleted records from the browse recordsource are displayed.
	MinButton = .F.
	Name = "frmBrowseForm"
	nsqlhandle = 0		&& SQL Server Connection Handle.
	oca = .NULL.		&& Data explorer cursor adapter.
	ShowTips = .T.
	Top = 0
	Visible = .F.
	Width = 482
	WindowType = 1
	_memberdata = <VFPData>
		<memberdata name="colddeleted" type="property" display="cOldDeleted"/>
		<memberdata name="nsqlhandle" display="nSQLHandle"/>
		<memberdata name="cowner" display="cOwner"/>
		<memberdata name="ctable" display="cTable"/>
		<memberdata name="querydata" display="QueryData"/>
		<memberdata name="savechanges" display="SaveChanges"/>
		<memberdata name="cancelchanges" display="CancelChanges"/>
		<memberdata name="oca" display="oCA"/>
		<memberdata name="orderbycolumn" display="OrderByColumn"/>
		<memberdata name="addfieldtofilter" display="AddFieldToFilter"/>
		<memberdata name="datachanged" display="DataChanged"/>
		</VFPData>		&& XML Metadata for customizable properties

	ADD OBJECT 'chkDeleted' AS cfoxcheckbox WITH ;
		Alignment = 0, ;
		Caption = "Show deleted records? (Invisible)", ;
		ControlSource = "thisform.lShowDeleted", ;
		Height = 17, ;
		Left = 105, ;
		Name = "chkDeleted", ;
		TabIndex = 6, ;
		Top = 28, ;
		Value = .F., ;
		Visible = .F., ;
		Width = 219, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="dataexplorerctrls.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cmdCancel' AS cfoxbutton WITH ;
		Anchor = 8, ;
		Caption = "", ;
		Height = 23, ;
		Left = 458, ;
		Name = "cmdCancel", ;
		Picture = undo.bmp, ;
		TabIndex = 5, ;
		ToolTipText = "Undo Changes", ;
		Top = 0, ;
		Width = 22, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="dataexplorerctrls.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdQuery' AS cfoxbutton WITH ;
		Anchor = 8, ;
		Caption = "", ;
		Default = .T., ;
		Height = 23, ;
		Left = 416, ;
		Name = "cmdQuery", ;
		Picture = bitmaps\run.bmp, ;
		TabIndex = 2, ;
		ToolTipText = "Run Query", ;
		Top = 0, ;
		Width = 22, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="dataexplorerctrls.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdSave' AS cfoxbutton WITH ;
		Anchor = 8, ;
		Caption = "", ;
		Height = 23, ;
		Left = 437, ;
		Name = "cmdSave", ;
		Picture = save.bmp, ;
		TabIndex = 4, ;
		ToolTipText = "Save Changes", ;
		Top = 0, ;
		Width = 22, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="dataexplorerctrls.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'edtFilter' AS cfoxeditbox WITH ;
		Anchor = 10, ;
		Height = 21, ;
		Left = 30, ;
		Name = "edtFilter", ;
		TabIndex = 1, ;
		Top = 2, ;
		Width = 384
		*< END OBJECT: ClassLib="dataexplorerctrls.vcx" BaseClass="editbox" />

	ADD OBJECT 'grdBrowse' AS cquerygrid WITH ;
		Anchor = 15, ;
		GridLineColor = 192,192,192, ;
		Height = 276, ;
		Left = 2, ;
		Name = "grdBrowse", ;
		TabIndex = 3, ;
		Top = 24, ;
		Width = 478, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="dataexplorerctrls.vcx" BaseClass="grid" />

	ADD OBJECT 'imgClearFilter' AS cfoximage WITH ;
		Anchor = 8, ;
		Height = 16, ;
		Left = 398, ;
		Name = "imgClearFilter", ;
		Picture = bitmaps\error.bmp, ;
		ToolTipText = "Clear Filter", ;
		Top = 4, ;
		Width = 16
		*< END OBJECT: ClassLib="dataexplorerctrls.vcx" BaseClass="image" />

	ADD OBJECT 'lblFilter' AS cfoxlabel WITH ;
		AutoSize = .T., ;
		Caption = "Filter:", ;
		Left = 2, ;
		Name = "lblFilter", ;
		TabIndex = 7, ;
		Top = 5
		*< END OBJECT: ClassLib="dataexplorerctrls.vcx" BaseClass="label" />
	
	PROCEDURE addfieldtofilter		&& Double-clicking on column header adds field to filter.
		* Right-clicking on column header adds field to filter.
		Local loHeader as Header, loColumn as Column, lcField
		Local array laEvent[1]
		
		AEvents(laEvent, 0)
		loHeader = laEvent[1]
		loColumn = loHeader.Parent
		lcField = JustExt(loColumn.ControlSource)
		
		Thisform.edtFilter.Value = Evl(Thisform.edtFilter.Value + " ", "") + Alltrim(lcField) + " "
		Thisform.edtFilter.SetFocus()
		* Position cursor at end of text
		Thisform.edtFilter.SelStart = Len(Thisform.edtFilter.Value)
	ENDPROC

	PROCEDURE cancelchanges		&& Cancel changes to data.
		* Cancel changes to data
		
		TableRevert(.t., Thisform.cTable)
		Thisform.grdBrowse.Refresh()
	ENDPROC

	PROCEDURE datachanged		&& Detect if changes were made and give user opportunity to cancel operation before losing them.
		* Detect if changes were made and give user opportunity to cancel operation before losing them.
		If Used(This.cTable) and GetNextModified(0, This.cTable) <> 0
			If MessageBox("Changes to the data have been detected and will be lost. Do you want to continue?",4+32,"Changes Detected") = 7
				Return .t.
			EndIf 
		EndIf 
		
		Return .f.
	ENDPROC

	PROCEDURE Destroy
		LOCAL lcDeleted
		
		DODEFAULT()
		
		lcDeleted = this.cOldDeleted
		SET DELETED &lcDeleted
		
		RETURN
	ENDPROC

	PROCEDURE Init
		*JAL* Editable browse form for SQL Server
		Lparameters lnSQLHandle, lcOwner, lcTable
		Local lReadOnly
		LOCAL oDataExplorerEngine
		
		lReadOnly = .f.	&& JAL 
		Thisform.nSQLHandle = lnSQLHandle
		Thisform.cOwner = lcOwner
		Thisform.cTable = Alltrim(lcTable)
		
		Thisform.oCA = NewObject("cCursorAdapter", "DataExplorerCA.vcx")
		Thisform.oCA.DataSource = Thisform.nSQLHandle
		Thisform.oCA.Alias = Thisform.cTable
		Thisform.QueryData("SELECT TOP 100 * FROM " + IIF(!EMPTY(lcOwner), "[" + lcOwner+ "].", '') + "[" + lcTable+ "]")
		Thisform.Caption = Thisform.cTable + " (Top 100 Records)"
		
		DODEFAULT()
		
		oDataExplorerEngine = NEWOBJECT("DataExplorerEngine", "DataExplorerEngine.prg")
		
		THIS.FontName   = oDataExplorerEngine.cFontName
		THIS.FontSize   = oDataExplorerEngine.nFontSize
		THIS.FontBold   = 'B' $ oDataExplorerEngine.cFontStyle
		THIS.FontItalic = 'I' $ oDataExplorerEngine.cFontStyle
		
		THIS.grdBrowse.RecordSource = Thisform.cTable
		THIS.grdBrowse.ReadOnly = lReadOnly
		
		IF lReadOnly
			THIS.grdBrowse.DeleteMark = .F.
		ENDIF
		
		THIS.BindControls = .T.
		
		WITH THIS.grdBrowse
		   .FontName   = THIS.FontName
		   .FontSize   = THIS.FontSize
		   .FontBold   = THIS.FontBold
		   .FontItalic = THIS.FontItalic
		
		   * RAS 28-Dec-2006, fixed problem with grid headers not respecting the 
		   * font attributes selected by the end user of the browse form.
		   FOR EACH loColumn IN .Columns FOXOBJECT 
		      loColumn.Header1.FontName   = this.FontName
		      loColumn.Header1.FontSize   = this.FontSize
		      loColumn.Header1.FontBold   = this.FontBold
		      loColumn.Header1.FontItalic = this.FontItalic
		      *JAL* Order by column when header clicked
		      BindEvent(loColumn.Header1, "Click", Thisform, "OrderByColumn")
		      *JAL* Widen column to fit order icon
		      loColumn.Width = loColumn.Width + 10
		      *JAL* Right-click on column header to add field name to filter
		      BindEvent(loColumn.Header1, "RightClick", Thisform, "AddFieldToFilter")
		   ENDFOR 
		ENDWITH
		
		
		* RAS 19-Dec-2006, added checkbox to toggle deleted records
		this.lShowDeleted = NOT (SET("Deleted") = "ON")
		this.chkDeleted.Refresh()
		
		* RAS - Make call to set autoincrementing columns readonly
		this.SetColumnsReadOnly()
		
		RETURN
		
	ENDPROC

	PROCEDURE KeyPress
		LPARAMETERS tnKeyCode, tnShiftAltCtrl
		
		IF this.grdBrowse.ReadOnly
		   * Nothing to do
		ELSE
		   * Added for Sedna
		   * Handle the Ctrl+Y to add record to the BROWSE
		   IF tnShiftAltCtrl = 2 AND tnKeyCode = 25
		      APPEND BLANK IN (this.grdBrowse.RecordSource)
		      this.grdBrowse.Refresh()
		   ENDIF
		ENDIF
		
		RETURN
	ENDPROC

	PROCEDURE Load
		LOCAL lcDeleted
		
		this.cOldDeleted = SET("Deleted")
		Set Century On
		
		DODEFAULT()
		
		RETURN
	ENDPROC

	PROCEDURE lshowdeleted_assign
		LPARAMETERS tlShowDeleted
		
		this.lShowDeleted = tlShowDeleted
		
		IF this.lShowDeleted = .F.
		   SET DELETED ON
		ELSE
		   SET DELETED OFF
		ENDIF
		
		this.grdBrowse.Refresh()
		
		RETURN
		
	ENDPROC

	PROCEDURE orderbycolumn		&& Order data by selected column.
		* Order data by selected column.
		Local loHeader as Header, loColumn as Column, loGrid as Grid, lcOrder, lnCurrentArea, lnRecNo
		Local array laEvent[1]
		
		If Thisform.DataChanged()
			Return
		EndIf 
		This.CancelChanges()
		
		lnCurrentArea = Select()
		
		AEvents(laEvent, 0)
		loHeader = laEvent[1]
		loColumn = loHeader.Parent
		loGrid = loColumn.Parent
		
		lcOrder = JustExt(loColumn.ControlSource)
		Select (This.cTable)
		lnRecNo = Recno()
		If "contentup.bmp" $ Lower(loHeader.Picture)
			* Clicked second time so change to descending order
			Set Order To GridOrder Desc
			loHeader.Picture = FullPath("bitmaps\contentdown.bmp")
		Else 
			CursorSetProp("Buffering", 3)
			Index On &lcOrder Tag GridOrder
			CursorSetProp("Buffering", 5)
			loGrid.SetAll("Picture","","Header")
			loHeader.Picture = FullPath("bitmaps\contentup.bmp")
		EndIf 
		
		* Make sure records at top not hidden
		Go top 
		Thisform.grdBrowse.Refresh()
		Go (lnRecNo)
		Thisform.grdBrowse.Refresh()
		
		Select (lnCurrentArea)
		
		
		
		
	ENDPROC

	PROCEDURE querydata		&& Query data.
		Lparameters lcQuery
		Local lcOwner, lcWhere, loCA as cCursorAdapter of DataExplorerCA.vcx, loException as Exception, lcError
		
		If Thisform.DataChanged()
			Return
		EndIf 
		
		Wait "Running Query..." WINDOW NOWAIT 
		
		* If no query passed in, build it
		If Empty(lcQuery)
			lcOwner = IIF(!EMPTY(This.cOwner), "[" + This.cOwner+ "].", '')
			lcWhere = Iif(!Empty(Thisform.edtFilter.Value), "Where " + Alltrim(Thisform.edtFilter.Value), "")
			Text to lcQuery TextMerge NoShow PreText 1+2
				Select * from <<lcOwner>>[<<Thisform.cTable>>] <<lcWhere>>
			EndText 
		EndIf 
		
		* Use CA to query and save changes to data
		Try 
			
			Thisform.grdBrowse.RecordSource = ""
			Thisform.grdBrowse.SetAll("Picture","","Header")
			loCA = Thisform.oCA	&& for IntelliSense
			loCA.SelectCmd = lcQuery
			loCA.BuildSQLSchema()
			loCA.CursorFill(.t.)
			Thisform.grdBrowse.RecordSource = Thisform.cTable
			
			* Show filter in title bar
			Thisform.Caption = Thisform.cTable + " (" + Evl(Alltrim(Thisform.edtFilter.Value), "All Records") ;
				+ ") (" + Transform(Reccount(Thisform.cTable)) + " records)"
		
		Catch to loException
			Text to lcError TextMerge NoShow PreText 1+2
				Error peforming query:
				<<loException.Message>>
				Program: <<loException.Procedure>>
				Line: <<loException.LineNo>>
				Code: <<loException.LineContents>>
				Query: <<loCA.SelectCmd>>
			EndText 
			MessageBox(lcError, 16, "Query Error")
		Finally
			Wait Clear
		EndTry
		
	ENDPROC

	PROCEDURE QueryUnload
		If Thisform.DataChanged()
			NoDefault 
			Return 
		EndIf 
		
		Return DoDefault()
	ENDPROC

	PROCEDURE savechanges		&& Save changes to data.
		* Save changes to data
		Local lnTranMode
		
		* Set manual transaction mode
		lnTranMode = SQLGetProp(Thisform.nSQLHandle,"Transactions")
		SQLSetProp(Thisform.nSQLHandle,"Transactions",2)
		
		Try 
			If TableUpdate(.t., .t., Thisform.cTable)
				SQLCommit(Thisform.nSQLHandle)
			Else
				* Must get error info before SQLRollback
				MessageBox("Data could not be saved:" + Chr(13) + Message(), 48, "Data Error")
				SQLRollback(Thisform.nSQLHandle)
			EndIf 
		Catch
			MessageBox("Error saving data:" + Chr(13) + Message(), 48, "Data Error")
		Finally 
			* Restore transaction mode
			SQLSetProp(Thisform.nSQLHandle,"Transactions",lnTranMode)
		EndTry 
		
	ENDPROC

	PROCEDURE setcolumnsreadonly		&& This method is called after the grid recordsource is set to determine which columns need to be read-only (like autoincrementing integers).
		* This method was added for Sedna. The entire purpose is to make any columns
		* read only if the Visual FoxPro does not allow them to be changed (like an
		* autoincrementing integer column.
		LOCAL lnColumns
		
		#DEFINE ccAFIELDS_AUTOINC_NEXT_VALUE      17
		#DEFINE ccAFIELDS_AUTOINC_STEP            18
		
		DIMENSION laStructure[1]
		
		IF EMPTY(this.grdBrowse.RecordSource)
		   * Nothing to do
		ELSE
		   lnGridColumns  = this.grdBrowse.ColumnCount 
		   lcAlias        = this.grdBrowse.RecordSource
		
		   lnAliasColumns = AFIELDS(laStructure, lcAlias)
		
		   * Check all columns in the grid
		   FOR lnI = 1 TO lnGridColumns
		      lcControlSource = this.grdBrowse.Columns[lnI].ControlSource
		      lcControlSource = JUSTEXT(lcControlSource)
		
		      FOR lnY = 1 TO lnAliasColumns
		         * See if the controlsource is in the structure
		         IF UPPER(laStructure[lnY, 1]) == UPPER(lcControlSource)
		            * See if the column is autoincrementing
		            IF laStructure[lnY, ccAFIELDS_AUTOINC_NEXT_VALUE] > 0
		               this.grdBrowse.Columns[lnI].ReadOnly = .T.
		            ENDIF
		
		            EXIT
		         ENDIF
		      ENDFOR
		   ENDFOR
		ENDIF
		
		RETURN
	ENDPROC

	PROCEDURE cmdCancel.Click
		Thisform.CancelChanges()
		
	ENDPROC

	PROCEDURE cmdQuery.Click
		Thisform.QueryData()
	ENDPROC

	PROCEDURE cmdSave.Click
		Thisform.SaveChanges()
		
	ENDPROC

	PROCEDURE edtFilter.InteractiveChange
		This.ToolTipText = This.Value
	ENDPROC

	PROCEDURE imgClearFilter.Click
		* Clear filter and requery data
		Thisform.edtFilter.Value = ""
		Thisform.QueryData()
	ENDPROC

ENDDEFINE
