*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="dataexplorer.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS ccodewindowform AS form 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	Caption = "Code Window"
	DoCreate = .T.
	Height = 250
	Left = 30
	MinButton = .F.
	Name = "ccodewindowform"
	Top = 8
	Width = 557

ENDDEFINE

DEFINE CLASS cdataexplorer AS cfoxcontainer OF "dataexplorerctrls.vcx" 		&& Data Explorer user interface.
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cmdOptions" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="oBrowser" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="oImageList" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdAddConnection" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="shpSplitterHor" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="oTree" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdRefreshConnections" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="tmrEvent" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtVersion" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: addconnection
		*m: checkclassinclasslib		&& This method is called to check if a field mapping class library exists, and the class exists in the class library. (added for Sedna)
		*m: convertpixelstotwips
		*m: createobjectontarget
		*m: dropnode
		*m: droponcodewindow
		*m: dropondesignsurface
		*m: evaltext
		*m: getfieldmapping
		*m: getmaxbuttonwidth		&& This method is called to get the maximum size of the button width for the buttons at the top of the Data Explorer. This way they can all be set to the same size.
		*m: getuniqueobjname
		*m: gotonode
		*m: handlebuttonsettings		&& This method sets the buttons on the Data Explorer per the developer's preferences. The buttons can show just captions (default), just icons, or both icons and captions.
		*m: loadtree
		*m: onaddnode
		*m: ongotonode
		*m: onrefreshcaption
		*m: onremovenode
		*m: onresize		&& This method is called from the container resize event method to deal with object resizing and repositioning.
		*m: parsepropertylist
		*m: refreshnode
		*m: resizeform
		*m: rightclickmenu
		*m: saveconnections
		*m: setfont
		*m: showaddins
		*m: showdetails
		*m: showoptions
		*m: splittertop_access
		*m: splittertop_assign
		*m: treeexpandnode
		*p: ccurrentnodeid
		*p: cversion		&& This property is the version of the Data Explorer.
		*p: ldroppedoncodewindow
		*p: linitializing
		*p: linteractivemode
		*p: ltaskpane
		*p: npixelsperinchx
		*p: npixelsperinchy
		*p: nyoffset
		*p: odragnode
		*p: orootnode
		*p: splittertop
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	ccurrentnodeid = 
	cversion = v3.0.3		&& This property is the version of the Data Explorer.
	Height = 446
	HelpContextID = 1231201
	ldroppedoncodewindow = .F.
	linitializing = .T.
	Name = "cdataexplorer"
	npixelsperinchx = 0
	npixelsperinchy = 0
	nyoffset = 0
	odragnode = .NULL.
	orootnode = .NULL.
	splittertop = 0
	Width = 325
	_memberdata = <VFPData>
		<memberdata name="getfieldmapping" type="method" display="GetFieldMapping"/>
		<memberdata name="dropobjectoncodewindow" type="method" display="DropObjectOnCodeWindow"/>
		<memberdata name="checkclassinclasslib" type="method" display="CheckClassInClassLib"/>
		<memberdata name="refreshconnection" type="method" display="RefreshConnection"/>
		<memberdata name="handlebuttonsettings" type="method" display="HandleButtonSettings"/>
		<memberdata name="getmaxbuttonwidth" type="method" display="GetMaxButtonWidth"/>
		</VFPData>		&& XML Metadata for customizable properties

	ADD OBJECT 'cmdAddConnection' AS cfoxbutton WITH ;
		Caption = "\<Add Connection", ;
		Height = 21, ;
		Left = 0, ;
		Name = "cmdAddConnection", ;
		PictureMargin = 2, ;
		PicturePosition = 1, ;
		PictureSpacing = 2, ;
		TabIndex = 2, ;
		Top = 1, ;
		Width = 95, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="dataexplorerctrls.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdOptions' AS cfoxbutton WITH ;
		Caption = "\<Options", ;
		Height = 21, ;
		Left = 96, ;
		Name = "cmdOptions", ;
		PictureMargin = 2, ;
		PicturePosition = 1, ;
		PictureSpacing = 2, ;
		TabIndex = 3, ;
		Top = 1, ;
		Width = 95, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="dataexplorerctrls.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdRefreshConnections' AS cfoxbutton WITH ;
		Caption = "\<Refresh", ;
		Height = 21, ;
		Left = 192, ;
		Name = "cmdRefreshConnections", ;
		PictureMargin = 2, ;
		PicturePosition = 1, ;
		PictureSpacing = 2, ;
		TabIndex = 4, ;
		Top = 1, ;
		Width = 95, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="dataexplorerctrls.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'oBrowser' AS cwebbrowser WITH ;
		Anchor = 0, ;
		Height = 54, ;
		Left = 0, ;
		Name = "oBrowser", ;
		TabIndex = 5, ;
		TabStop = .F., ;
		Top = 389, ;
		Width = 320, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="dataexplorer.vcx" BaseClass="olecontrol" OLEObject="c:\windows\syswow64\ieframe.dll" Value="0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAEAAAAgvbwBvAHQAIABFAG4AdAByAHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAUA//////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACCNBjzLjs0BAwAAAEABAAAAAAAAAwBPAGwAZQBPAGIAagBlAGMAdABEAGEAdABhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAgEDAAAAAgAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArAAAAAAAAAADAEEAYwBjAGUAcwBzAE8AYgBqAFMAaQB0AGUARABhAHQAYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAA4AAAAAAAAAAMAQwBoAGEAbgBnAGUAZABQAHIAbwBwAHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAQAAAAAAAAAAwh+VaICjTQEalrAMBP1wWiTAAAABMhAACVBQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATAAAAAAAAAAAAAAAOAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAABsHwEAAAAAAAEAAIAAAAAANikAAAAAAADMGwEAAAAAAFzrAAAAAAAAqAUBAAAAAAAOKwAAAAAAANAEAQAAAAAAJCoAAAAAAAABAAAA4NBXAHM1zxGuaQgAKy4SYggAAAAAAAAATAAAAAEUAgAAAAAAwAAAAAAAAEaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdPEAAAAAAAAS8gAAAAAAAODyAAAAAAAArPMAAAAAAAB29AAAAAAAAET1AAAAAAAACvYAAAAAAADS9gAAAAAAAJ73AAAAAAAAaPgAAAAAAAA0+QAAAAAAAAD6AAAAAAAAkBwBAAAAAADEEQEAAAAAABwOAQAAAAAARB0BAAAAAADOsQAAAAAAAPoQAQAAAAAAzhUBAAAAAACCEgEAAAAAAD4TAQAAAAAA7h0BAAAAAAAmOgAAAAAAAH4gAQAAAAAAINAAAAAAAADuIQEAAAAAAA==" />

	ADD OBJECT 'oImageList' AS olecontrol WITH ;
		Left = 264, ;
		Name = "oImageList", ;
		Top = 48, ;
		Visible = .F., ;
		ZOrderSet = 2
		*< END OBJECT: BaseClass="olecontrol" OLEObject="c:\windows\syswow64\mscomctl.ocx" Value="0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAEAAAAgv////7///8EAAAA/vbwBvAHQAIABFAG4AdAByAHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAUA//////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEDbBjzLjs0BAwAAAEACAAAAAAAAAwBPAGwAZQBPAGIAagBlAGMAdABEAGEAdABhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAgEDAAAAAgAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAawEAAAAAAAADAEEAYwBjAGUAcwBzAE8AYgBqAFMAaQB0AGUARABhAHQAYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABcAAAAAAAAAAMAQwBoAGEAbgBnAGUAZABQAHIAbwBwAHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAD0AAAAAAAAABAAAAAIAAAD+/////v///wUAAAAGAAAABwAAAAgjfyQskYXREbFqAMDwKDYoIUM0EggAAADtAwAA7QMAAIB+4eYAAAYALQAAABAAEADAwMAA//84AAHvzasAAAUAXAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAACQAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5MzY4MjY1RS04NUZFLTExZDEtOEJFMy0wMDAwRjg3NTREQTEAAAAApOIAAAAAAABw4wAAAAAAADrkAAAAAAAABuUAAAAAAAABAACADAAAAEltYWdlSGVpZ2h0AAkAAABJCgAAABAAAAALAAAASW1hZ2VXaWR0aAAJAAAASQoAAAAQAAAAAAAAAAAAAAYAMQD/////BQAAgAAAAAABAAAAAQQAAAByAG8AbwB0AAEAAAABAAAAbHQAAPYAAABCTfYAAAAAAAAAdgAAACgAAAAQAAAAEAAAAAEABAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAACAAAAAgIAAgAAAAIAAgACAgAAAgICAAMDAwAAAAP8AAP8AAAD//wD/AAAA/wD/AP//AAD///8A//////////////////////94d4IiIkRE////8v/y//R4eHfy//L/9P////L/8v/09/d/giIhERH///hMRAH/8f//98wsQf/x///2CKTB//H///aPxqEREf//+G5qaP//////hma

	ADD OBJECT 'oTree' AS olecontrol WITH ;
		Anchor = 0, ;
		Height = 364, ;
		Left = 0, ;
		Name = "oTree", ;
		TabIndex = 1, ;
		Top = 24, ;
		Width = 324, ;
		ZOrderSet = 5
		*< END OBJECT: BaseClass="olecontrol" OLEObject="c:\windows\syswow64\mscomctl.ocx" Value="0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAEAAAAgv////7///8EAAAA/vbwBvAHQAIABFAG4AdAByAHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAUA//////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEBMCTzLjs0BAwAAAIACAAAAAAAAAwBPAGwAZQBPAGIAagBlAGMAdABEAGEAdABhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAgEDAAAAAgAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAiwAAAAAAAAADAEEAYwBjAGUAcwBzAE8AYgBqAFMAaQB0AGUARABhAHQAYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABcAAAAAAAAAAMAQwBoAGEAbgBnAGUAZABQAHIAbwBwAHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAADoBAAAAAAAABAAAAAIAAAD+////BQAAAAkAAAAGAAAABwAAAAgAAAD+/////vkEHHiYXREbFqAMDwKDYoIUM0EggAAAB9IQAAnyUAALE8wWoBAAYAIgAAAD0AAAAJAQAACAAAAAEAAAAB782rXAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAACQAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5MzY4MjY1RS04NUZFLTExZDEtOEJFMy0wMDAwRjg3NTREQTEAAAAAyr8AAAAAAABEwAAAAAAAAAzBAAAAAAAA2MEAAAAAAAABAACADgAAAEhpZGVTZWxlY3Rpb24ABQAAAEwAAAAADAAAAEluZGVudGF0aW9uABEAAABODQAAAAcAAAAAAAAAAAAFANiBsw0GCAAAAAAAAAUAAICs6RgAAQAAAFwAH97svQEABQD16RgAA1LjC5GPzhGd4wCqAEu4UQEAAACQAQAAJEAKAAAATGFiZWxFZGl0AAkAAABJCgAAAAEAAAAKAAAATGluZVN0eWxlAAkAAABJCgAAAAEAAAANAAAATW91c2VQb2ludGVyAAkAAABJCgAAAAAAAAAOAAAAUGF0aFNlcGFyYXRvcgAKAAAASAAAAAABAAAAXAYAAABTdHlsZQAJAAAASQoAAAAHAAAADAAAAE9MRURyYWdNb2RlAAkAAABJCgAAAAEAAAAMAAAAT0xFRHJvcE1vZGUACQAAAEkKAAAAAAAAAAsAAABDaGVja2JveGVzAAUAAABMAAAAAAwAAABIb3RUcmFja2luZwAFAAAATAAAAABBAGQAYQBEQgEABlRhaG9tYQBhAHMAeQBDAEQARQBuAGcAaQBuAGUAIABDAGwAYQBzAHMACQB7ADMANgA2ADMAMwAxADEAQgAtADYAQwBBAEMALQAxADEARAAxAC0AOQAyADkANgAtADQANAA0ADUANQAzADUANAAwADAAMAAwAH0AIABDADoAXABQAHIAbwBnAHIAYQBtACAARgBpAGwAZQBzAFwAQQBkAGEAcAB0AGUAYwBcAFMAaABhAHIAZQBkAFwARQBDAEQAQwAgAEUAbgBnAGkAbgBlAFwAZQBuAGcAaQBuAGUALgBkAGwAbAAAAEEAZABhAHAAdABlAGMAIABDAEQAIABHAHUAaQBkAGUACQB7AEIANgA3ADIAMgBCAEEAQgAtADIAQQBEADIALQAxADEARAAyAC0AOQBEADYAMwAtADAAMAA0ADAARAAwADAAMABCAEQAOQBEAH0AIABDADoAXABQAFIATwBHAFIAQQB+ADEAXABBAGQAYQBwAHQAZQBjAFwAUwBoAGEAcgBlAGQAXABDAEQARwB1AGkAZABlAFwAQwBEAEcAdQBpAGQAZQAuAG8AYwB4AAAAYQBkAGIA" />

	ADD OBJECT 'shpSplitterHor' AS shape WITH ;
		Anchor = 0, ;
		BackStyle = 0, ;
		BorderStyle = 0, ;
		Height = 4, ;
		Left = 2, ;
		MousePointer = 7, ;
		Name = "shpSplitterHor", ;
		Top = 386, ;
		Width = 641, ;
		ZOrderSet = 4
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'tmrEvent' AS timer WITH ;
		Enabled = .F., ;
		Height = 23, ;
		Interval = 5, ;
		Left = 300, ;
		Name = "tmrEvent", ;
		Top = 48, ;
		Width = 23
		*< END OBJECT: BaseClass="timer" />

	ADD OBJECT 'txtVersion' AS cfoxtextbox WITH ;
		Alignment = 1, ;
		Anchor = 9, ;
		BackStyle = 0, ;
		BorderStyle = 0, ;
		Height = 19, ;
		Left = 285, ;
		Name = "txtVersion", ;
		TabStop = .F., ;
		Top = 0, ;
		Width = 38
		*< END OBJECT: ClassLib="dataexplorerctrls.vcx" BaseClass="textbox" />
	
	PROCEDURE addconnection
		* Add a new connection
		LOCAL oConnectionNode
		
		* Locate the connections node
		oConnectionNode = THIS.oRootNode.GetNode("connections")
		IF VARTYPE(oConnectionNode) == 'O'
			oConnectionNode.AddConnection()
		ENDIF
		
	ENDPROC

	PROCEDURE checkclassinclasslib		&& This method is called to check if a field mapping class library exists, and the class exists in the class library. (added for Sedna)
		LPARAMETERS toParameter
		* toParameter.ClassLocation, toParameter.ClassName
		
		LOCAL llCancel, ;
		      lnClassCount, ;
		      lnI
		
		llCancel = .F.
		
		DO CASE 
		   * Already checked to see if the class library was empty, 
		   * so no check to ensure the class name is filled in
		   CASE EMPTY(toParameter.ClassName)
		      llCancel = .T.
		
		   * Check if this is a VCX class library. We are not checking inside of PRGs
		   CASE UPPER(JUSTEXT(toParameter.ClassLocation)) # "VCX"
		      llCancel = .F.
		
		   * Does the class library exist in folder available to this machine?
		   CASE NOT FILE(toParameter.ClassLocation)
		      llCancel = .T.
		
		   OTHERWISE
		      lnClassCount = AVCXCLASSES(laClass, toParameter.ClassLocation)
		      
		      IF lnClassCount = 0
		         * No classes, unusual, but can happen
		         llCancel = .T.
		      ELSE
		         llCancel = .T.
		         
		         FOR lnI = 1 TO lnClassCount
		            IF LOWER(toParameter.ClassName) == LOWER(laClass[lnI, 1])
		               * Found it
		               llCancel = .F.
		               EXIT
		            ELSE
		               * Keep going until we run out of classes to check
		            ENDIF
		         ENDFOR
		      ENDIF 
		ENDCASE      
		
		RETURN llCancel
	ENDPROC

	PROCEDURE convertpixelstotwips
		#DEFINE	WU_LOGPIXELSX  88
		#DEFINE	WU_LOGPIXELSY  90
		LPARAMETERS lnX, lnY
		LOCAL hDC
		
		DECLARE INTEGER GetDC IN win32api INTEGER
		DECLARE INTEGER ReleaseDC IN win32api INTEGER, INTEGER
		DECLARE INTEGER GetDeviceCaps IN win32api INTEGER,INTEGER
		SYS(2333,0)
		
		IF THIS.nPixelsPerInchX = 0
			hDC = GetDC(0)
			IF hDC > 0
				THIS.nPixelsPerInchX = GetDeviceCaps(hDC, WU_LOGPIXELSX)
				THIS.nPixelsPerInchY = GetDeviceCaps(hDC, WU_LOGPIXELSY)
				ReleaseDC(0,hDC)
			ENDIF
		ENDIF
		
		lnX = lnX / THIS.nPixelsPerInchX * 1440
		lnY = lnY / THIS.nPixelsPerInchY * 1440
		
		RETURN
		
	ENDPROC

	PROCEDURE createobjectontarget
		* Create an object of the specified class on the specified drop target
		#include "DataExplorer.h"
		#include "foxpro.h"
		LPARAMETERS nMouseXPos, nMouseYPos, cClassName, cClassLib, cOriginalObjName, cPropertyList, cDETable)
		LOCAL cObjName
		LOCAL i
		LOCAL oObjRef
		LOCAL oException
		LOCAL nCnt
		LOCAL nPos
		LOCAL nOleErrorNo
		LOCAL lPixelMode
		LOCAL cActiveWindow
		LOCAL oTopObject
		LOCAL nScaleMode
		LOCAL oFormObject
		LOCAL oTempObject
		LOCAL oDropTarget
		LOCAL ARRAY aFrmObj[1]
		LOCAL ARRAY aDropTarget[1]
		LOCAL ARRAY aMousePos[1]
		LOCAL nScreenRow
		LOCAL nScreenCol
		LOCAL cOriginalObjName
		LOCAL oPropertyCollection
		
		m.cActiveWindow = ''
		
		m.nScreenRow = MROW(_SCREEN.Caption, 3)
		m.nScreenCol = MCOL(_SCREEN.Caption, 3)
		
		* don't create objects on the Toolbox form or Data Explorer Form
		IF AMOUSEOBJ(aDropTarget, 1) > 0 AND INLIST(LOWER(aDropTarget[2].Name), "toolbox", "dataexplorer")
			RELEASE m.aDropTarget
			RETURN
		ENDIF
		
		* If control key is pressed, then drop on outermost container
		DECLARE INTEGER GetKeyState IN user32 INTEGER vKey 
		
		IF BITTEST(GetKeyState(VK_CONTROL), 15)
			IF AMOUSEOBJ(aDropTarget, 1) > 0
				* first traverse up from our current position until we get the target form or the target form's caption is equal to our caption
				oTempObject = aDropTarget[1]
				DO WHILE TYPE("oTempObject.Parent") == 'O'
					IF oTempObject.Parent.BaseClass == "Form"
						EXIT
					ENDIF
					oTempObject = oTempObject.Parent
				ENDDO
				IF TYPE("oTempObject.Parent.Caption") == 'C' AND TYPE("oTempObject.Name") == 'C' AND oTempObject.Parent.Caption == oTempObject.Name
					m.oDropTarget = m.oTempObject
					m.nMouseYPos = m.aDropTarget[4]
					m.nMouseXPos = m.aDropTarget[3]
				ELSE
					m.oDropTarget = aDropTarget[2]
					m.nMouseYPos = m.aDropTarget[4]
					m.nMouseXPos = m.aDropTarget[3]
				ENDIF
				oTempObject = .NULL.
				RELEASE oTempObject
			ENDIF
		ENDIF
		
		IF VARTYPE(m.oDropTarget) <> 'O'
			IF AMOUSEOBJ(aDropTarget) > 0
				m.oDropTarget = aDropTarget[1]
			ENDIF
		ENDIF
		
		RELEASE m.aDropTarget
		
		
		IF VARTYPE(m.cClassName) == 'C' AND !EMPTY(m.cClassName) AND VARTYPE(m.oDropTarget) == 'O' AND PEMSTATUS(m.oDropTarget, "BaseClass", 5)
			* if the current drop target isn't a container, then try its parent
			IF !INLIST(m.oDropTarget.BaseClass, "Form", "Formset", "Page", "Pageframe", "Container", "Grid", "Column", "Toolbar", "Optiongroup", "Commandgroup", "Dataenvironment") 
				IF TYPE("m.oDropTarget.Parent") == 'O' AND ;
				 INLIST(m.oDropTarget.Parent.BaseClass, "Form", "Formset", "Page", "Pageframe", "Container", "Grid", "Column", "Toolbar", "Optiongroup", "Commandgroup", "Dataenvironment") AND ;
				 (TYPE("m.oDropTarget.Parent.Caption") <> 'C' OR TYPE("m.oDropTarget.Name") <> 'C' OR m.oDropTarget.Parent.Caption <> m.oDropTarget.Name)
		
					m.oDropTarget = m.oDropTarget.Parent
				ELSE
					RELEASE m.oDropTarget
					MESSAGEBOX(ERROR_NONCONTAINER_LOC, MB_ICONEXCLAMATION, DATAEXPLORER_LOC)
					RETURN
				ENDIF
			ENDIF
			
			* set the scale mode to pixels
			m.nScaleMode  = 3
			m.oFormObject = .NULL.
			m.oTopObject  = m.oDropTarget
			DO WHILE TYPE("m.oTopObject.Parent") == 'O'
				IF TYPE("m.oTopObject.ScaleMode") == 'N' AND m.oTopObject.ScaleMode <> 3
					m.oFormObject = m.oTopObject
					EXIT
				ENDIF
				m.oTopObject = m.oTopObject.Parent
			ENDDO
		
		
			IF VARTYPE(m.oFormObject) == 'O'
				IF PEMSTATUS(m.oFormObject, "ScaleMode", 0)
					m.nScaleMode = m.oFormObject.ScaleMode
				ELSE
					m.nScaleMode = -1 && means we need to do a ResetToDefault when done
				ENDIF
				m.oFormObject.ScaleMode = 3  && set to pixels
			ENDIF
		
			* get design form window name
			m.oTopObject = m.oDropTarget
			DO WHILE TYPE("m.oTopObject.Parent") == 'O' && AND TYPE("m.oTopObject.Parent.Top") == 'N'
				IF TYPE("m.oTopObject.Caption") == 'C' AND EMPTY(m.cActiveWindow) AND WEXIST(m.oTopObject.Caption)
					m.cActiveWindow = m.oTopObject.Caption
				ENDIF
		
				m.oTopObject = m.oTopObject.Parent
			ENDDO
		
		
			IF VARTYPE(m.nMouseXPos) <> 'N'
				m.nMouseXPos = 0
			ENDIF
			IF VARTYPE(m.nMouseYPos) <> 'N'
				m.nMouseYPos = 0
			ENDIF
		
			IF VARTYPE(m.oDropTarget) == 'O'
				IF VARTYPE(m.cOriginalObjName) <> 'C' OR EMPTY(m.cOriginalObjName)
					m.cOriginalObjName = m.cClassName
				ENDIF
				IF VARTYPE(m.cClassLib) <> 'C'
					m.cClassLib = ''
				ENDIF
		
				IF VARTYPE(m.cPropertyList) <> 'C'
					m.cPropertyList = ''
				ENDIF
		
		
				m.cObjName = THIS.GetUniqueObjName(m.oDropTarget, m.cOriginalObjName)
				* make sure we can locate the file
				IF !EMPTY(m.cClassName)
					TRY
						IF VARTYPE(oDropTarget) == 'O'
							* standard VFP class from a VCX or PRG
							IF !EMPTY(m.cClassLib)
								TRY
									m.cClassLib = LOCFILE(m.cClassLib, JUSTEXT(m.cClassLib))
								CATCH
									m.cClassLib = ''
								ENDTRY
							ENDIF
		
							IF EMPTY(m.cClassLib)
								oDropTarget.AddObject(m.cObjName, m.cClassName)
							ELSE
								oDropTarget.NewObject(m.cObjName, m.cClassName, m.cClassLib)
							ENDIF
		
							TRY
								m.oObjRef = oDropTarget.&cObjName
							CATCH
							ENDTRY
		
							IF VARTYPE(m.oObjRef) == 'O' 
								m.oObjRef.Name = m.cObjName
							ENDIF
						ENDIF
		
		
					* error handling in case the object didn't drop
					CATCH TO oException WHEN oException.ErrorNo == 1429
						IF ISNULL(m.oException.Details)
							MESSAGEBOX(ERROR_INVALIDCONTAINER_LOC, MB_ICONEXCLAMATION, DATAEXPLORER_LOC)
						ELSE
							* parse the OLE error string
							m.nOLEErrorNo = VAL(STREXTRACT(m.oException.Details, " code ", " from ", 1, 1))
							DO CASE
							CASE m.nOLEErrorNo == 744  && invalid container
								DOEVENTS
								MESSAGEBOX(ERROR_INVALIDCONTAINER_LOC, MB_ICONEXCLAMATION, DATAEXPLORER_LOC)
							OTHERWISE
								DOEVENTS
								MESSAGEBOX(ALLTRIM(SUBSTR(m.oException.Details, AT_C(": ", m.oException.Details) + 1)), MB_ICONEXCLAMATION, DATAEXPLORER_LOC + " - " + LOWER(m.oException.Procedure))
							ENDCASE
						ENDIF
		
					CATCH TO oException
						DOEVENTS
						MESSAGEBOX(m.oException.Message, MB_ICONEXCLAMATION, DATAEXPLORER_LOC + " - " + LOWER(m.oException.Procedure))
					ENDTRY
				ENDIF
		
		
				IF VARTYPE(m.oObjRef) == 'O'
					TRY
						IF PEMSTATUS(m.oObjRef, "Left", 5) AND !PEMSTATUS(m.oObjRef, "Left", 1) AND !PEMSTATUS(m.oObjRef, "Left", 2)
							m.oObjRef.Left = m.nMouseXpos
						ENDIF
					CATCH
					ENDTRY
					TRY
						IF PEMSTATUS(m.oObjRef, "Top", 5) AND !PEMSTATUS(m.oObjRef, "Top", 1) AND !PEMSTATUS(m.oObjRef, "Top", 2)
							m.oObjRef.Top  = m.nMouseYPos
						ENDIF
					CATCH
					ENDTRY
					TRY
						IF PEMSTATUS(m.oObjRef, "Visible", 5) AND !PEMSTATUS(m.oObjRef, "Visible", 1) AND !PEMSTATUS(m.oObjRef, "Visible", 2) AND !m.oObjRef.Visible
							m.oObjRef.Visible = .T.
						ENDIF
					CATCH
					ENDTRY
		
					* if this is a baseclass, set the AutoSize and then reset it back
					IF TYPE("m.oObjRef.ClassLibrary") == 'C' AND EMPTY(m.oObjRef.ClassLibrary) AND TYPE("m.oObjRef.AutoSize") == 'L'
						TRY
							m.oObjRef.AutoSize = .T.
							IF TYPE("m.oObjRef.Height") == 'N'
								TRY
									m.oObjRef.Height = m.oObjRef.Height
								CATCH
								ENDTRY
							ENDIF
							IF TYPE("m.oObjRef.Width") == 'N'
								TRY
									m.oObjRef.Width = m.oObjRef.Width
								CATCH
								ENDTRY
							ENDIF
							m.oObjRef.ResetToDefault("AutoSize")
						CATCH
						ENDTRY
					ENDIF
		
					* -- set any properties specified by "properties"
					* Parse the property list into a collection
					IF !EMPTY(m.cPropertyList)
		            *< SET STEP ON 
		         
						m.oPropertyCollection = THIS.ParsePropertyList(m.cPropertyList)
		
						FOR m.i = 1 TO m.oPropertyCollection.Count
							m.cPropertyName = m.oPropertyCollection.Item(m.i).Name
							m.cPropertyValue = TRANSFORM(m.oPropertyCollection.Item(m.i).Value)
		
		
							IF !EMPTY(m.cPropertyName)
								IF UPPER(m.cPropertyValue) == ".T." OR UPPER(m.cPropertyValue) == ".F."
									m.cDataType = 'L'
								ELSE
									m.cDataType = TYPE("m.oObjRef." + m.cPropertyName)
								ENDIF
								TRY
									DO CASE
									CASE m.cDataType == 'N'
										m.oObjRef.&cPropertyName = VAL(m.cPropertyValue)
									CASE m.cDataType == 'L'
										m.oObjRef.&cPropertyName = (UPPER(m.cPropertyValue) == ".T." OR UPPER(m.cPropertyValue) == "T")
									OTHERWISE
										m.oObjRef.&cPropertyName = m.cPropertyValue
									ENDCASE
								CATCH
								ENDTRY
							ENDIF
						ENDFOR
						
						DOEVENTS
					ENDIF
		
					IF VARTYPE(m.oTopObject) == 'O' AND !EMPTY(m.cActiveWindow) AND WEXIST(m.cActiveWindow)
						IF TYPE("m.oObjRef.Top") <> 'N' 
							* no Top property on this control, so assume it's in the upper left corner
							m.nMouseYPos = 0
							m.nMouseXPos = 0
						ENDIF
					ENDIF
		
		
					DOEVENTS
					MOUSE CLICK AT m.nScreenRow, m.nScreenCol PIXELS SHIFT CONTROL
		
					* if we're dropping a container object, we need to SHIFT-CTRL click outside 
					* of it to deselect it so we're not drilled into (halo effect) by default, and
					* then do a regular click directly on it to select it again
		 				IF INLIST(m.oObjRef.BaseClass, "Container", "Commandgroup", "Pageframe", "Optiongroup", "Grid")
		 					DOEVENTS
		 					
		 					* click in an area outside the container
		 					* the CASE statement determines whether we have
		 					* room to the left or the top to click
		 					DO CASE
		 					CASE m.nMouseXPos > 2
			 				MOUSE CLICK AT m.nScreenRow, m.nScreenCol-3 PIXELS SHIFT CONTROL
		 					CASE m.nMouseYPos > 2
			 				MOUSE CLICK AT m.nScreenRow - 3, m.nScreenCol PIXELS SHIFT CONTROL
			 			ENDCASE
		 				DOEVENTS
						MOUSE CLICK AT m.nScreenRow, m.nScreenCol PIXELS
					ENDIF
					DOEVENTS
					DOEVENTS
		
					IF PEMSTATUS(m.oDropTarget, "Refresh", 5)
						m.oDropTarget.Refresh()
					ENDIF
		
					IF VARTYPE(m.oFormObject) == 'O'
						TRY
							IF m.nScaleMode == -1
								m.oFormObject.ResetToDefault("ScaleMode")
							ELSE
								m.oFormObject.ScaleMode = m.nScaleMode
							ENDIF
						CATCH
						ENDTRY
					ENDIF
		
					IF VARTYPE(m.cDETable) == 'C' AND !EMPTY(m.cDETable)
						* THIS.AddToDataEnv(m.oDropTarget, m.cDETable)
					ENDIF
		
		
				ENDIF
		
				m.oObjRef =.NULL.
			ENDIF
		ENDIF
		
		RELEASE m.oDropTarget
		RELEASE m.oTopObject
		RELEASE m.oFormObject
		RELEASE m.oObjRef
		
	ENDPROC

	PROCEDURE Destroy
		LOCAL oResourceOptions
		
		THIS.SaveConnections()
		THIS.oRootNode.ReleaseNodes()
		
		oResourceOptions = NEWOBJECT("FoxResource", "FoxResource.prg")
		oResourceOptions.Set("SplitterTop", THIS.SplitterTop)
		
		IF THIS.lTaskPane
			oResourceOptions.Load("DATAEXPLORER", "DataExplorer_TP")
		ELSE
			oResourceOptions.Save("DATAEXPLORER", "DataExplorerPane")
		ENDIF
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE dropnode
		#include "foxpro.h"
		#include "dataexplorer.h"
		LPARAMETERS lDropOnCodeWindow, oDragNode, nMouseXPos, nMouseYPos
		LOCAL cPropertyList
		LOCAL oClassInfo
		LOCAL cPropertyList
		LOCAL cCtrlName
		LOCAL oDragDropCollection
		LOCAL i
		LOCAL oException
		LOCAL oDataExplorerEngine
		LOCAL oCurrentNode
		PRIVATE oParameter
		
		
		* expand all nodes that we're dropping
		IF !oDragNode.Expanded
			THIS.TreeExpandNode(oDragNode, .F., .T.)
		ENDIF
		
		oCurrentNode = THIS.oRootNode.GetNode(oDragNode.Key)
		
		
		oDataExplorerEngine = NEWOBJECT("DataExplorerEngine", "DataExplorerEngine.prg")
		
		*< SET STEP ON 
		
		IF lDropOnCodeWindow
			oDragDropCollection = oDataExplorerEngine.GetDragDropAddIns(oCurrentNode, .F., DEFTYPE_DROP_CODEWINDOW)
		ELSE
			oDragDropCollection = oDataExplorerEngine.GetDragDropAddIns(oCurrentNode, .F., DEFTYPE_DROP_DESIGNSURFACE)
		ENDIF
		
		* Create a parameter that we can pass to our script code,
		* where user can override before we actually create
		* the object on the design surface.
		oParameter = CREATEOBJECT("Empty")
		
		
		ADDPROPERTY(oParameter, "oDataExplorerEngine", oDataExplorerEngine)
		ADDPROPERTY(oParameter, "RootNode", THIS.oRootNode)
		ADDPROPERTY(oParameter, "MouseXPos", nMouseXPos)
		ADDPROPERTY(oParameter, "MouseYPos", nMouseYPos)
		ADDPROPERTY(oParameter, "TreeNode", oDragNode)
		ADDPROPERTY(oParameter, "NodeData", .NULL.)
		ADDPROPERTY(oParameter, "CurrentNode", oCurrentNode)
		ADDPROPERTY(oParameter, "ParentNode", THIS.oRootNode.GetNode(oCurrentNode.ParentID))
		ADDPROPERTY(oParameter, "ControlName", '')
		ADDPROPERTY(oParameter, "ClassName", '')
		ADDPROPERTY(oParameter, "ClassLocation", '')
		ADDPROPERTY(oParameter, "PropertyList", '')
		ADDPROPERTY(oParameter, "Template", '')
		ADDPROPERTY(oParameter, "Caption", oDragNode.Text)
		ADDPROPERTY(oParameter, "DropText", oCurrentNode.NodeText)
		ADDPROPERTY(oParameter, "Continue", .T.) && set to FALSE to stop processing additional drag/drop addins
		ADDPROPERTY(oParameter, "Cancel", .F.)   && set to TRUE to abort the drop
		
		*< SET STEP ON 
		
		IF TYPE("oCurrentNode.NodeData") == 'O' AND !ISNULL(oCurrentNode.NodeData)
			oParameter.NodeData = oCurrentNode.NodeData
			IF TYPE("oCurrentNode.NodeData.Name") == 'C'
				oParameter.Caption = PROPER(oCurrentNode.NodeData.Name)
			ENDIF
			IF TYPE("oCurrentNode.NodeData.Name") == 'C'
				oParameter.DropText = oCurrentNode.NodeData.Name
			ENDIF
		
			IF TYPE("oCurrentNode.NodeData.Type") == 'C'
				DO CASE
				CASE oCurrentNode.NodeData.Type == "Column"
					oClassInfo = THIS.GetFieldMapping(oCurrentNode.NodeData.DataType)
		
					oParameter.ClassName = oClassInfo.ClassName
					oParameter.ClassLocation = oClassInfo.ClassLocation
					oParameter.ControlName = oClassInfo.NamePrefix + PROPER(oCurrentNode.NodeData.Name)
		
					IF TYPE("oParameter.ParentNode.NodeData.Name") == 'C'
						oParameter.PropertyList = TEXTMERGE( ;
						 [ControlSource=<<LOWER(oParameter.ParentNode.NodeData.Name)>>.<<LOWER(oCurrentNode.NodeData.Name)>>] + CHR(10), ;
						 .F., "<<", ">>")
					ELSE
						oParameter.PropertyList = TEXTMERGE( ;
						 [ControlSource=<<LOWER(oCurrentNode.NodeData.Name)>>] + CHR(10), .F., "<<", ">>")
					ENDIF
		
				CASE oCurrentNode.NodeData.Type == "Table" OR oCurrentNode.NodeData.Type == "View"
					oClassInfo = THIS.GetFieldMapping("Multiple")
		
					oParameter.ClassName = oClassInfo.ClassName
					oParameter.ClassLocation = oClassInfo.ClassLocation
					oParameter.ControlName = oClassInfo.NamePrefix + PROPER(oCurrentNode.NodeData.Name)
		
		         m.cPropertyList = TEXTMERGE( ;
		          [RecordSource=<<LOWER(oCurrentNode.NodeData.Name)>>] + CHR(10), ;
		          .F., "<<", ">>")
		         
		         * RAS 16-Jul-2006, fixing bug - grid created was not getting the RecordSource set properly
		         oParameter.PropertyList = m.cPropertyList
				ENDCASE
			ENDIF
		ENDIF
		
		IF oDragDropCollection.Count > 0
			FOR i = 1 TO oDragDropCollection.Count
				IF !EMPTY(oDragDropCollection.Item(i).ScriptCode)
					oParameter.Template = oDragDropCollection.Item(i).Template
					TRY
						EXECSCRIPT(oDragDropCollection.Item(i).ScriptCode, oParameter)
					CATCH TO oException
						MESSAGEBOX(ERROR_DROPSCRIPT_LOC + CHR(10) + CHR(10) + ;
						 oDragDropCollection.Item(i).Caption + CHR(10) + ;
						 TRANSFORM(EVL(oException.userValue, oException.Message)) + CHR(10) + ;
						 oException.LineContents, ;
						 MB_ICONEXCLAMATION, DATAEXPLORER_LOC)
					ENDTRY
		
					IF (TYPE("oParameter.Cancel") == 'L' AND oParameter.Cancel) OR (TYPE("oParameter.Continue") == 'L' AND !oParameter.Continue)
						EXIT
					ENDIF
				ENDIF
			ENDFOR
		ENDIF
		
		* RAS 22-Jul-2006, check if the class exists. There is a problem with with VFP
		* when you are dragging and dropping objects from the Data Explorer to a designer 
		* if the class definition does not exist:
		*
		*    "Error 43 (There is not enough memory to complete this operation.)"
		* 
		* One example of this is dragging/dropping VFP table to the form designer. This can 
		* happen when the classlibrary or class no longer exists, or is not available 
		* (class lib renamed or folder changed).
		
		*< SET STEP ON 
		
		IF oParameter.Cancel
		   * Nothing to do when we are cancelling
		ELSE
		   * Situation where you have base classes or SQL Drag/Drop manager handled the new object
		   * and blanked out the oParameter.ClassName so second grid is not created.
		   IF EMPTY(oParameter.ClassLocation) OR EMPTY(oParameter.ClassName)
		      * No classlibrary, will be using a base class so nothing to check (or is dropping on code window) 
		   ELSE
		      * Check to see of the class library and class exist
		      oParameter.Cancel = this.CheckClassInClassLib(oParameter)
		      
		      IF oParameter.Cancel
		         MESSAGEBOX(BAD_FIELDMAPPING + ;
		                    REPLICATE(CHR(13),2) + ;
		                    oParameter.ClassName + ;
		                    " (" + oParameter.ClassLocation + ")" + ;
		                    REPLICATE(CHR(13),2) + ;
		                    DATATYPE_FIELDMAPPING + SPACE(1) + ;
		                    oClassInfo.FieldTypeName, ;
		                    MB_ICONEXCLAMATION, ;
		                    DATAEXPLORER_LOC)
		      ELSE
		         * Everything is good, keep going
		      ENDIF
		   ENDIF
		ENDIF
		
		IF !lDropOnCodeWindow AND !oParameter.Cancel AND !EMPTY(oParameter.ClassName)
			THIS.CreateObjectOnTarget(oParameter.MouseXPos, oParameter.MouseYPos, oParameter.ClassName, oParameter.ClassLocation, oParameter.ControlName, oParameter.PropertyList + IIF(EMPTY(oParameter.Caption), '', CHR(10) + "Caption="+oParameter.Caption))
		ENDIF
		
		
		RETURN oParameter
		
	ENDPROC

	PROCEDURE droponcodewindow
		LOCAL oParam
		
		IF TYPE("THIS.oDragNode") == 'O' AND !ISNULL(THIS.oDragNode)
			oParam = THIS.DropNode(.T., THIS.oDragNode, 0, 0)
		
			RETURN IIF(oParam.Cancel, .NULL., oParam.DropText)
		ELSE
			RETURN .NULL.
		ENDIF
		
	ENDPROC

	PROCEDURE dropondesignsurface
		LPARAMETERS oDragNode, nMouseXPos, nMouseYPos
		THIS.DropNode(.F., oDragNode, nMouseXPos, nMouseYPos)
		
	ENDPROC

	PROCEDURE evaltext
		#include "foxpro.h"
		#include "dataexplorer.h"
		LPARAMETERS cScript
		LOCAL cEvalScript
		LOCAL oException
		
		cEvalScript = cScript
		IF LEFT(cScript, 1) == '(' AND RIGHT(cScript, 1) == ')'
			TRY
				cEvalScript = EVALUATE(cScript)
			CATCH TO oException
				MESSAGEBOX(oException.Message, MB_ICONEXCLAMATION, DATAEXPLORER_LOC + " - " + LOWER(m.oException.Procedure))
			ENDTRY
		ENDIF
		RETURN cEvalScript
		
	ENDPROC

	PROTECTED PROCEDURE getfieldmapping
		* Load field mappings and templates from the registry
		#include "..\ffc\registry.h"
		LPARAMETERS cDataType, lBinary
		LOCAL oReg
		LOCAL cRegPath
		LOCAL oClassInfo
		LOCAL cValue
		LOCAL cFldType
		LOCAL cDefaultClass
		LOCAL cNamePrefix
		LOCAL oTemp
		 
		*< SET STEP ON
		
		DO CASE
		CASE cDataType == 'W'
			cFldType = "Blob"
			cDefaultClass = "Editbox"
		CASE cDataType == 'C' AND lBinary
			cFldType = "Character (binary)"
			cDefaultClass = "Textbox"
		CASE cDataType == 'C'
			cFldType = "Character"
			cDefaultClass = "Textbox"
		CASE cDataType == 'Y'
			cFldType = "Currency"
			cDefaultClass = "Textbox"
		CASE cDataType == 'D'
			cFldType = "Date"
			cDefaultClass = "Textbox"
		CASE cDataType == 'T'
			cFldType = "DateTime"
			cDefaultClass = "Textbox"
		CASE cDataType == 'B'
			cFldType = "Double"
			cDefaultClass = "Textbox"
		CASE cDataType == 'F'
			cFldType = "Float"
			cDefaultClass = "Textbox"
		CASE cDataType == 'G'
			cFldType = "General"
			cDefaultClass = "Oleboundcontrol"
		CASE cDataType == 'I'
			cFldType = "Integer"
			cDefaultClass = "Textbox"
		CASE cDataType == 'L'
			cFldType = "Logical"
			cDefaultClass = "Checkbox"
		CASE cDataType == 'M' AND lBinary
			cFldType = "Memo (binary)"
			cDefaultClass = "Editbox"
		CASE cDataType == 'M'
			cFldType = "Memo"
			cDefaultClass = "Editbox"
		CASE cDataType == 'N'
			cFldType = "Numeric"
			cDefaultClass = "Textbox"
		CASE cDataType == 'Q'
			cFldType = "Varbinary"
			cDefaultClass = "Textbox"
		CASE cDataType == 'V' AND lBinary
			cFldType = "Varchar (binary)"
			cDefaultClass = "Textbox"
		CASE cDataType == 'V'
			cFldType = "Varchar"
			cDefaultClass = "Textbox"
		CASE cDataType == "Multiple"
			cFldType = "Multiple"
			cDefaultClass = "Grid"
		OTHERWISE
			cFldType = cDataType
			cDefaultClass = "Textbox"
		ENDCASE
		
		
		oClassInfo = CREATEOBJECT("Empty")
		ADDPROPERTY(oClassInfo, "ClassName", cDefaultClass)
		ADDPROPERTY(oClassInfo, "ClassLocation", '')
		ADDPROPERTY(oClassInfo, "NamePrefix", '')
		
		* RAS 22-Jul-2006, added new properties to help with 
		* messaging when problems occur instantiating objects.
		* The reason for the DefaultClass is the ClassName property
		* can change based on Field Mapping in Registry. Might be
		* better at some point to use DefaultClass if the 
		* Field Mapping class has a problem (like not available).
		ADDPROPERTY(oClassInfo, "DefaultClass", cDefaultClass)
		ADDPROPERTY(oClassInfo, "FieldTypeName", cFldType)
		
		cNamePrefix = ''
		TRY
			oTemp = NEWOBJECT(oClassInfo.ClassName, oClassInfo.ClassLocation, 0)
			DO CASE
			CASE oTemp.BaseClass == "Textbox"
				cNamePrefix = "txt"
			CASE oTemp.BaseClass == "Editbox"
				cNamePrefix = "edt"
			CASE oTemp.BaseClass == "Checkbox"
				cNamePrefix = "chk"
			CASE oTemp.BaseClass == "Grid"
				cNamePrefix = "grd"
			CASE oTemp.BaseClass == "Oleboundcontrol"
				cNamePrefix = "ole"
			ENDCASE
		CATCH
			* unable to instantiate object -- ignore error
		ENDTRY
		
		oClassInfo.NamePrefix = cNamePrefix
		
		IF !EMPTY(cFldType)		
			m.oReg = NEWOBJECT("Registry", HOME() + "ffc\registry.vcx") && from FFC
			m.cRegPath = "Software\Microsoft\VisualFoxPro\" + TRANSFORM(VERSION(5)/100) + ".0\Options\IntelliDrop\FieldTypes"
			IF m.oReg.OpenKey(m.cRegPath, HKEY_CURRENT_USER) == ERROR_SUCCESS
				IF oReg.GetRegKey("ClassName", @cValue, m.cRegPath + '\' + cFldType, HKEY_CURRENT_USER) == 0
					oClassInfo.ClassName = EVL(m.cValue, oClassInfo.ClassName)
				ENDIF
		
				IF oReg.GetRegKey("ClassLocation", @cValue, m.cRegPath + '\' + cFldType, HKEY_CURRENT_USER) == 0
					oClassInfo.ClassLocation = m.cValue
				ENDIF
		
				m.oReg.CloseKey()
			ENDIF
		ENDIF
		
		RETURN oClassInfo
		
	ENDPROC

	PROCEDURE getmaxbuttonwidth		&& This method is called to get the maximum size of the button width for the buttons at the top of the Data Explorer. This way they can all be set to the same size.
		* RAS 13-Nov-2006, added method to determine the maximum size 
		* of buttons so they can all be set to the same size.
		LOCAL lnAddConnectionWidth, ;
		      lnOptionsWidth, ;
		      lnRefreshWidth
		
		lnAddConnectionWidth = IIF(LENC(this.cmdAddConnection.Caption) = 0, 0, this.cmdAddConnection.Width)
		lnOptionsWidth       = IIF(LENC(this.cmdOptions.Caption) = 0, 0, this.cmdOptions.Width)
		lnRefreshWidth       = IIF(LENC(this.cmdRefreshConnections.Caption) = 0, 0, this.cmdRefreshConnections.Width)
		      
		RETURN MAX(lnAddConnectionWidth, ;
		           lnOptionsWidth, ;
		           lnRefreshWidth)
		
	ENDPROC

	PROCEDURE getuniqueobjname
		* Given the drop target object, and the original name
		* we want to use, add a numeric indentifier to the
		* end until we find a unique name on the target object
		#include "DataExplorer.h"
		LPARAMETERS oDropTarget, cOriginalObjName
		LOCAL i
		LOCAL cObjName
		
		m.cOriginalObjName = CHRTRAN(ALLTRIM(m.cOriginalObjName), INVALID_OBJNAME_CHARS, '')
		IF !ISALPHA(m.cOriginalObjName) OR (LEFT(m.cOriginalObjName, 1) == '_')
			m.cOriginalObjName = 'o' + m.cOriginalObjName
		ENDIF
		
		m.i = 1
		m.cObjName = m.cOriginalObjName
		DO WHILE .T.
			IF TYPE("oDropTarget.&cObjName.") = "U"
				EXIT
			ENDIF
			m.i = m.i + 1
			m.cObjName = m.cOriginalObjName + TRANSFORM(m.i)
		ENDDO
		
		RETURN m.cObjName
		
	ENDPROC

	PROCEDURE gotonode
		* Position on the selected node
		LPARAMETERS cNodeID
		LOCAL i
		LOCAL lFound
		
		lFound = .F.
		WITH THIS.oTree
			FOR i = 1 TO .Nodes.Count
				IF .Nodes(i).Key == cNodeID
					.SelectedItem = .Nodes(i)
					.Nodes(i).EnsureVisible()
					lFound = .T.
					EXIT
				ENDIF
			ENDFOR
		ENDWITH
		
		RETURN lFound
	ENDPROC

	PROCEDURE handlebuttonsettings		&& This method sets the buttons on the Data Explorer per the developer's preferences. The buttons can show just captions (default), just icons, or both icons and captions.
		* RAS 13-Nov-2006, added this method to allow button preferences and 
		* easier localization by localization teams.
		
		LOCAL loResourceOptions, ;
		      lnButtonIconCaptionPreference, ;
		      llHotTrackingButtonsPreference, ;
		      lnSpacing, ;
		      lnOriginalHeight
		
		* Set the distance between the buttons on the form.
		lnSpacing        = 1
		lnOriginalHeight = this.cmdAddConnection.Height
		
		* Get settings from Fox Resource file and set defaults if not set yet
		loResourceOptions = NEWOBJECT("FoxResource", "FoxResource.prg")
		loResourceOptions.Load("DATAEXPLORER")
		
		lnButtonIconCaptionPreference  = loResourceOptions.Get("ButtonIconCaptionPreference")
		
		IF ISNULL(lnButtonIconCaptionPreference)
		   lnButtonIconCaptionPreference = 0
		ENDIF
		
		llHotTrackingButtonsPreference = loResourceOptions.Get("HotTrackingButtonsPreference")
		
		IF ISNULL(llHotTrackingButtonsPreference)
		   llHotTrackingButtonsPreference = .F.
		ENDIF
		
		thisform.LockScreen = .T.
		
		* Make preference settings and adjust buttons
		this.cmdAddConnection.SpecialEffect      = IIF(llHotTrackingButtonsPreference, 2, 0)
		this.cmdOptions.SpecialEffect            = IIF(llHotTrackingButtonsPreference, 2, 0)
		this.cmdRefreshConnections.SpecialEffect = IIF(llHotTrackingButtonsPreference, 2, 0)
		
		DO CASE
		   * Just captions
		   CASE lnButtonIconCaptionPreference = 0
		      this.cmdAddConnection.Caption       = BUTTON_CAPTION_ADDCONNECTION_LOC
		      this.cmdOptions.Caption             = BUTTON_CAPTION_OPTIONS_LOC
		      this.cmdRefreshConnections.Caption  = BUTTON_CAPTION_REFRESH_LOC
		      
		      this.cmdAddConnection.ToolTipText      = SPACE(0)
		      this.cmdOptions.ToolTipText            = SPACE(0)
		      this.cmdRefreshConnections.ToolTipText = SPACE(0)
		
		      this.cmdAddConnection.Picture       = SPACE(0)
		      this.cmdOptions.Picture             = SPACE(0)
		      this.cmdRefreshConnections.Picture  = SPACE(0)
		
		   * Just icons
		   CASE lnButtonIconCaptionPreference = 1
		      this.cmdAddConnection.Caption       = SPACE(0)
		      this.cmdOptions.Caption             = SPACE(0)
		      this.cmdRefreshConnections.Caption  = SPACE(0)
		      
		      IF FILE(BUTTON_ICON_ADDCONNECTION_LOC)
		         this.cmdAddConnection.Picture     = BUTTON_ICON_ADDCONNECTION_LOC
		         this.cmdAddConnection.ToolTipText = STRTRAN(BUTTON_CAPTION_ADDCONNECTION_LOC, "\<", SPACE(0))
		      ELSE
		         this.cmdAddConnection.Picture = SPACE(0)
		         this.cmdAddConnection.Caption = BUTTON_CAPTION_ADDCONNECTION_LOC
		      ENDIF
		      
		      IF FILE(BUTTON_ICON_OPTIONS_LOC)
		         this.cmdOptions.Picture     = BUTTON_ICON_OPTIONS_LOC
		         this.cmdOptions.ToolTipText = STRTRAN(BUTTON_CAPTION_OPTIONS_LOC, "\<", SPACE(0))
		      ELSE
		         this.cmdOptions.Picture = SPACE(0)
		         this.cmdOptions.Caption = BUTTON_CAPTION_OPTIONS_LOC
		      ENDIF
		      
		      IF FILE(BUTTON_ICON_REFRESH_LOC) 
		         this.cmdRefreshConnections.Picture     = BUTTON_ICON_REFRESH_LOC
		         this.cmdRefreshConnections.ToolTipText = STRTRAN(BUTTON_CAPTION_REFRESH_LOC, "\<", SPACE(0))
		      ELSE
		         this.cmdRefreshConnections.Picture = SPACE(0)
		         this.cmdRefreshConnections.Caption = BUTTON_CAPTION_REFRESH_LOC
		      ENDIF
		      
		   * Both captions and icons
		   CASE lnButtonIconCaptionPreference = 2
		      this.cmdAddConnection.Caption       = BUTTON_CAPTION_ADDCONNECTION_LOC
		      this.cmdOptions.Caption             = BUTTON_CAPTION_OPTIONS_LOC
		      this.cmdRefreshConnections.Caption  = BUTTON_CAPTION_REFRESH_LOC
		
		      this.cmdAddConnection.ToolTipText      = SPACE(0)
		      this.cmdOptions.ToolTipText            = SPACE(0)
		      this.cmdRefreshConnections.ToolTipText = SPACE(0)
		
		      IF FILE(BUTTON_ICON_ADDCONNECTION_LOC)
		         this.cmdAddConnection.Picture     = BUTTON_ICON_ADDCONNECTION_LOC
		      ELSE
		         this.cmdAddConnection.Picture = SPACE(0)
		      ENDIF
		      
		      IF FILE(BUTTON_ICON_OPTIONS_LOC)
		         this.cmdOptions.Picture = BUTTON_ICON_OPTIONS_LOC
		      ELSE
		         this.cmdOptions.Picture = SPACE(0)
		      ENDIF
		      
		      IF FILE(BUTTON_ICON_REFRESH_LOC) 
		         this.cmdRefreshConnections.Picture = BUTTON_ICON_REFRESH_LOC
		      ELSE
		         this.cmdRefreshConnections.Picture = SPACE(0)
		      ENDIF
		
		   OTHERWISE
		      * No other cases at this time
		ENDCASE
		
		this.cmdAddConnection.AutoSize      = .T.
		this.cmdOptions.AutoSize            = .T.
		this.cmdRefreshConnections.AutoSize = .T.
		
		lnButtonWidth = this.GetMaxButtonWidth()
		
		IF EMPTY(this.cmdAddConnection.Picture) ;
		     AND EMPTY(this.cmdOptions.Picture) ;
		     AND EMPTY(this.cmdRefreshConnections.Picture)
		   this.cmdAddConnection.AutoSize      = .F.
		   this.cmdOptions.AutoSize            = .F.
		   this.cmdRefreshConnections.AutoSize = .F.
		ENDIF
		
		this.cmdAddConnection.Width         = IIF(LENC(this.cmdAddConnection.Caption) = 0, 23, lnButtonWidth)
		this.cmdOptions.Width               = IIF(LENC(this.cmdOptions.Caption) = 0, 23, lnButtonWidth)
		this.cmdRefreshConnections.Width    = IIF(LENC(this.cmdRefreshConnections.Caption) = 0, 23, lnButtonWidth)
		
		this.cmdAddConnection.Height        = lnOriginalHeight
		this.cmdOptions.Height              = lnOriginalHeight
		this.cmdRefreshConnections.Height   = lnOriginalHeight
		
		* Must handle in the order of the buttons on the form
		this.cmdAddConnection.Left      = 0
		this.cmdOptions.Left            = this.cmdAddConnection.Left + this.cmdAddConnection.Width + lnSpacing
		this.cmdRefreshConnections.Left = this.cmdOptions.Left + this.cmdOptions.Width + lnSpacing
		
		thisform.LockScreen             = .F.
		
		RETURN
	ENDPROC

	PROCEDURE Init
		LPARAMETERS lTaskPane
		LOCAL oDataExplorerEngine
		LOCAL oImageCollection
		LOCAL i
		LOCAL oException
		
		DODEFAULT()
		
		IF VARTYPE(lTaskPane) == 'L'
			THIS.lTaskPane = lTaskPane
		ENDIF
		
		IF THIS.lTaskPane
			* THIS.shpSplitterHor.Visible = .F.
		ENDIF
		
		
		oDataExplorerEngine = NEWOBJECT("DataExplorerEngine", "DataExplorerEngine.prg")
		
		THIS.oBrowser.Visible = oDataExplorerEngine.ShowDescription
		THIS.SetFont(oDataExplorerEngine)
		
		THIS.oBrowser.nBackColor = THIS.BackColor
		THIS.oBrowser.Write("<p>&nbsp;</p>")
		
		oImageCollection = oDataExplorerEngine.GetImageList()
		FOR i = 1 TO oImageCollection.Count
			IF FILE(oImageCollection.Item(i).Filename)
				TRY
					THIS.oImageList.ListImages.Add(, RTRIM(oImageCollection.Item(i).UniqueID), LOADPICTURE(oImageCollection.Item(i).Filename))
				CATCH TO oException
					* ignore error -- couldn't load the picture, but that's not a big deal
				ENDTRY
			ENDIF
		ENDFOR
		
		this.HandleButtonSettings()
		
		
		* create association between tree and imagelist before
		* any nodes are added
		THIS.oTree.ImageList = THIS.oImageList
		
		THIS.LoadTree()
		
		RETURN
		
		
	ENDPROC

	PROCEDURE loadtree
		LOCAL i
		
		IF TYPE("THIS.oRootNode") == 'O' AND !ISNULL(THIS.oRootNode)
			THIS.oRootNode.ReleaseNodes()
		ENDIF
		
		THIS.oRootNode = NEWOBJECT("RootNode", "TreeNodes.prg")
		
		THIS.oTree.Nodes.Clear()
		THIS.OnAddNode(THIS.oRootNode)
		
		BINDEVENT(THIS.oRootNode, "HookAddNode", THIS, "OnAddNode")
		BINDEVENT(THIS.oRootNode, "HookRemoveNode", THIS, "OnRemoveNode")
		BINDEVENT(THIS.oRootNode, "HookGotoNode", THIS, "OnGotoNode")
		BINDEVENT(THIS.oRootNode, "HookRefreshCaption", THIS, "OnRefreshCaption")
		
		* expand any nodes that are at the root level
		FOR i = 1 TO THIS.oTree.Nodes.Count
			THIS.TreeExpandNode(THIS.oTree.Nodes(i), .T.)
		ENDFOR
		
		THIS.ShowDetails()
		
		
	ENDPROC

	PROCEDURE onaddnode
		#include "DataExplorer.h"
		LPARAMETERS oNode
		LOCAL oTreeNode
		LOCAL cChildKey
		LOCAL cImageKey
		
		WITH THIS.oTree
			* determine if image specified exists in our image list
			IF EMPTY(oNode.ImageKey)
				cImageKey = "root"
			ELSE
				cImageKey = oNode.ImageKey
				TRY
					* this verifies the existence of the image key
					nIndex = THIS.oImageList.ListImages.Item(oNode.ImageKey)
				CATCH
					cImageKey = "root"
				ENDTRY
			ENDIF
		
				
			IF EMPTY(oNode.ParentID)
				oTreeNode = .Nodes.Add(,, oNode.NodeID, oNode.NodeText + IIF(oNode.Filtered, FILTERED_LOC, ''), cImageKey)
			ELSE
				oTreeNode = .Nodes.Add(oNode.ParentID, tvwChild, oNode.NodeID, oNode.NodeText + IIF(oNode.Filtered, FILTERED_LOC, ''), cImageKey)
			ENDIF
		
			IF !oNode.EndNode
				.Nodes.Add(oNode.NodeID, tvwChild, "temp." + SYS(2015), NODE_LOADING_LOC)
			ENDIF
			oTreeNode.Expanded = oNode.Expanded
		
			IF VARTYPE(oTreeNode.Parent) == 'O' AND oTreeNode.Parent.Child.Key = "temp."
				.Nodes.Remove(oTreeNode.Parent.Child.Key)
			ENDIF
		ENDWITH
		
	ENDPROC

	PROCEDURE ongotonode
		* Position on the selected node
		LPARAMETERS oNode
		
		THIS.GotoNode(oNode.NodeID)
		
	ENDPROC

	PROCEDURE onrefreshcaption
		* <oNode> = reference to Data Explorer node to refresh caption of
		#include "DataExplorer.h"
		LPARAMETERS oNode
		LOCAL i
		LOCAL nCnt
		
		IF VARTYPE(oNode) == 'O'
			WITH THIS.oTree
				FOR i = 1 TO .Nodes.Count
					IF .Nodes.Item(i).Key == oNode.NodeID
						.Nodes.Item(i).Text = oNode.NodeText + IIF(oNode.Filtered, FILTERED_LOC, '')
						EXIT
					ENDIF
				ENDFOR
			ENDWITH
		ENDIF
		
	ENDPROC

	PROCEDURE onremovenode
		* <oNode> = reference to Data Explorer node to remove
		* [lRemoveAll] = specifies that oNode references a parent node
		*   for which we want to remove all children
		#include "DataExplorer.h"
		LPARAMETERS oNode, lRemoveAll
		LOCAL i
		LOCAL nCnt
		
		IF VARTYPE(oNode) == 'O'
			WITH THIS.oTree
				IF lRemoveAll
					nCnt = .Nodes.Count
					FOR i = nCnt TO 1 STEP -1
						IF VARTYPE(.Nodes.Item(i).Parent) == 'O' AND .Nodes.Item(i).Parent.Key == oNode.NodeID
							.Nodes.Remove(i)
						ENDIF
					ENDFOR
				ELSE
					FOR i = 1 TO .Nodes.Count
						IF .Nodes.Item(i).Key == oNode.NodeID
							.Nodes.Remove(i)
							EXIT
						ENDIF
					ENDFOR
				ENDIF
			ENDWITH
		ENDIF
		
	ENDPROC

	PROCEDURE onresize		&& This method is called from the container resize event method to deal with object resizing and repositioning.
	ENDPROC

	PROCEDURE parsepropertylist
		* given a property list in the below format, parse
		* it into a collection object
		*
		*	AutoSize=.T.
		*	Name=MyForm1
		*
		#include "DataExplorer.h"
		#include "foxpro.h"
		LPARAMETERS cPropertyList
		LOCAL i
		LOCAL nCnt
		LOCAL nPos
		LOCAL cPropertyName
		LOCAL cPropertyValue
		LOCAL oPropertyCollection
		LOCAL oException
		LOCAL ARRAY aPropertyList[1]
		
		m.oPropertyCollection = NEWOBJECT("PropertyCollection", "DataExplorerEngine.prg")
		
		IF !EMPTY(m.cPropertyList)
			m.nCnt = ALINES(aPropertyList, m.cPropertyList, .F., CHR(10))
			FOR m.i = 1 TO m.nCnt
				m.nPos = AT('=', aPropertyList[m.i])
				IF m.nPos > 1
					m.cPropertyName = LEFT(aPropertyList[m.i], m.nPos - 1)
					m.cPropertyValue = SUBSTR(aPropertyList[m.i], m.nPos + 1)
					IF !EMPTY(m.cPropertyName)
						m.cPropertyValue = THIS.EvalText(m.cPropertyValue)
						IF !EMPTY(m.cPropertyValue)
							TRY
								* m.oPropertyCollection.Add(m.cPropertyValue, m.cPropertyName)
								m.oPropertyCollection.AddPropertyValue(m.cPropertyName, m.cPropertyValue)
							CATCH TO oException
								* ignore the error message unless we're debugging
								MESSAGEBOX(oException.Message, MB_ICONEXCLAMATION, DATAEXPLORER_LOC + " - " + LOWER(m.oException.Procedure))
							ENDTRY
						ENDIF
					ENDIF
				ENDIF
			ENDFOR
		ENDIF
		
		RETURN m.oPropertyCollection
		
	ENDPROC

	PROCEDURE refreshnode
		#include "DataExplorer.h"
		LOCAL cNodeID
		LOCAL oCurrentNode
		
		TRY
			cNodeID = THIS.oTree.SelectedItem.Key
		CATCH
			cNodeID = ''
		ENDTRY
		
		oCurrentNode = THIS.oRootNode.GetNode(cNodeID)
		IF VARTYPE(oCurrentNode) == 'O'
			oCurrentNode.RefreshNode()
		ENDIF
	ENDPROC

	PROCEDURE Resize
		this.OnResize()
		RETURN
	ENDPROC

	PROCEDURE resizeform
		LPARAMETERS lSetAnchors
		LOCAL oResourceOptions
		LOCAL nSplitterTop
		LOCAL nTop, nLeft, nWidth, nHeight
		
		IF PCOUNT() == 0
			lSetAnchors = (THIS.oTree.Anchor <> 0)
		ENDIF
		
		THIS.oTree.Anchor = 0
		THIS.oBrowser.Anchor = 0
		THIS.shpSplitterHor.Anchor = 0
		THIS.shpSplitterHor.Visible = THIS.oBrowser.Visible
		
		IF THIS.lInitializing && AND !THIS.lTaskPane
			oResourceOptions = NEWOBJECT("FoxResource", "FoxResource.prg")
			IF THIS.lTaskPane
				oResourceOptions.Load("DATAEXPLORER", "DataExplorer_TP")
			ELSE
				oResourceOptions.Load("DATAEXPLORER", "DataExplorerPane")
			ENDIF
			nSplitterTop = oResourceOptions.Get("SplitterTop")
		
			IF VARTYPE(nSplitterTop) == 'N' AND BETWEEN(nSplitterTop, 100, THIS.Height - 20)
				THIS.SplitterTop = nSplitterTop
			ELSE
				THIS.SplitterTop = THIS.Height - THIS.oBrowser.Height - THIS.shpSplitterHor.Height
				* THIS.SplitterTop = THIS.Height - 20
			ENDIF
		ENDIF
		
		IF THIS.lTaskPane
		*	THIS.SplitterTop = THIS.Height - THIS.oBrowser.Height - THIS.shpSplitterHor.Height
		ENDIF
		
		THIS.oTree.Width = THIS.Width
		THIS.oBrowser.Width = THIS.Width
		THIS.shpSplitterHor.Width = THIS.Width
		
		IF THIS.oBrowser.Visible
			THIS.oTree.Height = MAX(THIS.shpSplitterHor.Top - THIS.oTree.Top, 0)
		
			nHeight = MAX(THIS.Height - (THIS.shpSplitterHor.Top + THIS.shpSplitterHor.Height), 0)
			nTop = THIS.shpSplitterHor.Top + THIS.shpSplitterHor.Height
			nLeft = THIS.oBrowser.Left
			nWidth = THIS.oBrowser.Width
		
		
			IF nLeft <> THIS.oBrowser.Left OR nTop <> THIS.oBrowser.Top OR nWidth <> THIS.oBrowser.Width OR nHeight <> THIS.oBrowser.Height
				THIS.oBrowser.Move(nLeft, nTop, nWidth + 1, nHeight)
				THIS.oBrowser.Move(nLeft, nTop, nWidth, nHeight)
				THIS.oBrowser.Width = THIS.oBrowser.Width
			ENDIF
			THIS.oBrowser.Resizable = .F.
			
		ELSE
			THIS.oTree.Height = THIS.Height - THIS.oTree.Top
		ENDIF
		
		IF lSetAnchors
			THIS.oTree.Anchor = 15
			IF THIS.oBrowser.Visible
				THIS.oBrowser.Anchor = 14
				THIS.shpSplitterHor.Anchor = 14
			ENDIF
		ENDIF
		
		THIS.lInitializing = .F.
		
	ENDPROC

	PROCEDURE rightclickmenu
		#include "DataExplorer.h"
		LPARAMETERS nRow, nCol
		LOCAL cNodeID
		LOCAL oMenu
		PRIVATE oRef
		PRIVATE oForm
		PRIVATE oCurrentNode
		
		* so that we can use it in our ON SELECTION BAR command
		oRef = THIS
		oForm = THISFORM
		
		TRY
			cNodeID = THIS.oTree.SelectedItem.Key
		CATCH
			cNodeID = ''
		ENDTRY
		
		oCurrentNode = THIS.oRootNode.GetNode(cNodeID)
		IF VARTYPE(oCurrentNode) == 'O'
			oMenu = oCurrentNode.CreateContextMenu()
			IF oMenu.MenuBarCount > 0
				THIS.oTree.Object.Enabled = .F.
				* display a container on top of the tree so that
				* if the user click off the menu it goes away
				* This is to work-around a bug where the menu
				* doesn't exit when click on an ActiveX control.
		*!*			THIS.tempControl.BorderWidth = 1
		*!*			this.tempControl.BackStyle = 1
		*!*			THIS.tempControl.Visible = .T.
		*!*			THIS.tempControl.Top = THIS.oTree.Top
		*!*			THIS.tempControl.Left = THIS.oTree.Left
		*!*			THIS.tempControl.Width = THIS.oTree.Width
		*!*			THIS.tempControl.Height = THIS.oTree.Height
		*!*			THIS.tempControl.ZOrder(0)
				
				oMenu.Show(m.nRow, m.nCol, THISFORM.Name)
		*!*			THIS.tempControl.Visible = .F.
				THIS.oTree.Object.Enabled = .T.
			ENDIF
		ENDIF
		
		
	ENDPROC

	PROCEDURE saveconnections
		* Save currently active connections
		IF TYPE("THIS.oRootNode") == 'O' AND !ISNULL(THIS.oRootNode)
			THIS.oRootNode.Save()
		ENDIF
		
	ENDPROC

	PROCEDURE setfont
		* Abstract:
		*   Change the font.
		*
		* Parameters:
		*	None
		LPARAMETERS oDataExplorerEngine
		
		THIS.oTree.Font        = oDataExplorerEngine.cFontName
		THIS.oTree.Font.Size   = oDataExplorerEngine.nFontSize
		THIS.oTree.Font.Bold   = 'B' $ oDataExplorerEngine.cFontStyle
		THIS.oTree.Font.Italic = 'I' $ oDataExplorerEngine.cFontStyle
		
		THIS.oBrowser.cFontFace = oDataExplorerEngine.cFontName
		THIS.oBrowser.nFontSize = oDataExplorerEngine.nFontSize * 1.1
		
	ENDPROC

	PROCEDURE showaddins
		DO FORM AddInMgr
	ENDPROC

	PROCEDURE showdetails
		* Abstract:
		*   Show the node details in the browser window.
		*
		LPARAMETERS oTreeNode
		LOCAL nSelect
		LOCAL cXML
		LOCAL cHTML
		LOCAL oCurrentNode
		LOCAL cNodeID
		LOCAL i
		LOCAL cRowText
		
		IF !THIS.oBrowser.Visible
			RETURN
		ENDIF
		
		nSelect = SELECT()
		
		cNodeID = ''
		IF VARTYPE(oTreeNode) == 'O'
			cNodeID = oTreeNode.Key
		ELSE
			IF TYPE("THIS.oTree.SelectedItem") == 'O' AND !ISNULL(THIS.oTree.SelectedItem)
				cNodeID = THIS.oTree.SelectedItem.Key
			ENDIF
		ENDIF
		
		cXML = ''
		IF !EMPTY(cNodeID)
			oCurrentNode = THIS.oRootNode.GetNode(cNodeID)
		
			IF VARTYPE(oCurrentNode) == 'O'
				cXML = oCurrentNode.GetDetails()
			ENDIF
		ENDIF
		
		IF VARTYPE(cXML) <> 'C' OR EMPTY(cXML)
			THIS.oBrowser.Write([<p>&nbsp;</p>])
		ELSE
			* format xml into html
			* TO-DO: apply XSL stylesheet
			* <row>
			*   <caption></caption>
			*   <value></value>
			* </row>
			cHTML = [<table border="0">]
			FOR i = 1 TO OCCURS("<row>", cXML)
				cRowText = STREXTRACT(cXML, "<row>", "</row>", i)
				cHTML = cHTML + [<tr STYLE="font-family: #FONTNAME#"><td nowrap>] + EVL(STREXTRACT(cRowText, "<caption>", "</caption>"), "&nbsp;") + "</td>" + ;
				 "<td nowrap>" + EVL(STREXTRACT(cRowText, "<value>", "</value>"), "&nbsp;") + "<td></tr>"
			ENDFOR
			cHTML = cHTML + [</table>]
			THIS.oBrowser.Write(cHTML)
		ENDIF
		
		SELECT (nSelect)
		
	ENDPROC

	PROCEDURE showoptions
		LOCAL oDataExplorerEngine
		
		THIS.SaveConnections()
		
		DO FORM DataExplorerOptions
		
		oDataExplorerEngine = NEWOBJECT("DataExplorerEngine", "DataExplorerEngine.prg")
		THIS.SetFont(oDataExplorerEngine)
		THIS.oBrowser.Visible = oDataExplorerEngine.ShowDescription
		oDataExplorerEngine = .NULL.
		
		* RAS 13-Nov-2006, Added options to control "toolbar" buttons so need to update
		this.HandleButtonSettings()
		
		THIS.lInitializing = .T.
		THIS.ResizeForm()
		THIS.lInitializing = .F.
		
		*< RAS 16-Oct-2006, changed so the tree is not reloaded and 
		*< nodes are not callapesed.
		*< THIS.LoadTree()
		
		RETURN
	ENDPROC

	PROCEDURE splittertop_access
		*To do: Modify this routine for the Access method
		IF TYPE("THIS.shpSplitterHor") == 'O'
			RETURN THIS.shpSplitterHor.Top
		ELSE
			RETURN THIS.SplitterTop
		ENDIF
		
		
		
		
	ENDPROC

	PROCEDURE splittertop_assign
		LPARAMETERS nTop
		
		THIS.shpSplitterHor.Top = m.nTop
		THIS.SplitterTop = m.nTop
		
		
		
	ENDPROC

	PROCEDURE treeexpandnode
		#include "foxpro.h"
		LPARAMETERS oTreeNode, lInit, lCollapseImmediately
		LOCAL i
		LOCAL oNode
		LOCAL nMouse
		LOCAL lLockScreen
		
		IF lInit
			oNode = THIS.oRootNode.GetNode(oTreeNode.Key)
			IF VARTYPE(oNode) <> 'O' OR !oNode.ExpandOnInit
				RETURN
			ENDIF
		ENDIF
		
		IF oTreeNode.Children == 0
			RETURN
		ENDIF
		
		nMouse = THISFORM.MousePointer
		THISFORM.MousePointer = MOUSE_HOURGLASS
		
		lLockScreen = THISFORM.LockScreen
		THISFORM.LockScreen = .T.
		THIS.oTree.Visible = .F.
		
		
		IF !oTreeNode.Expanded AND !lCollapseImmediately
			oTreeNode.Expanded = .T.
		ENDIF
		
		* if tag is empty, this means the parent
		* has never been loaded with its children
		* or is being forced to be refreshed
		IF RIGHT(oTreeNode.Tag, 1) <> '!'
			* remove all children except the one marked "temp."
			FOR i = oTreeNode.Children TO 2 STEP -1
				THIS.oTree.Nodes.Remove(oTreeNode.Child.Key)
			ENDFOR
		
			THIS.oRootNode.ExpandNode(oTreeNode.Key)
		
			IF oTreeNode.Child.Key = "temp."
				* THIS.oTree.Nodes.Remove(oTreeNode.Child.Key)
				oTreeNode.Expanded = .F.
			ELSE
				* set the Tag so we don't try to reload children again
				oTreeNode.Tag = oTreeNode.Tag + '!'
			ENDIF
			
		ENDIF
		
		THIS.oTree.Visible = .T.
		THISFORM.LockScreen = lLockScreen
		
		THISFORM.MousePointer = nMouse
		
	ENDPROC

	PROCEDURE cmdAddConnection.Click
		THIS.Parent.AddConnection()
		
	ENDPROC

	PROCEDURE cmdOptions.Click
		THIS.Parent.ShowOptions()
		
		
		
	ENDPROC

	PROCEDURE cmdRefreshConnections.Click
		* RAS 13-Nov-2006, Added refresh connections feature
		this.Parent.RefreshNode()
		RETURN
		
		
	ENDPROC

	PROCEDURE oTree.Expand
		*** ActiveX Control Event ***
		LPARAMETERS oNode
		
		THIS.Parent.TreeExpandNode(oNode)
		
	ENDPROC

	PROCEDURE oTree.Init
		THIS.AddProperty("lRightClick", .F.)
	ENDPROC

	PROCEDURE oTree.KeyDown
		*** ActiveX Control Event ***
		LPARAMETERS keycode, shift
		
		DO CASE
		CASE keycode == 116  && F5
			THIS.Parent.RefreshNode()
		CASE (keycode=121 and shift=1) OR (keycode=93 and shift=0)
			* shift-right click
			THIS.Parent.RightClickMenu(.3, .4)
		ENDCASE
	ENDPROC

	PROCEDURE oTree.KeyPress
		*** ActiveX Control Event ***
		LPARAMETERS keyascii
		
		IF keyascii == 27  && escape
			IF !THIS.Parent.lTaskPane
				THISFORM.Release()
			ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE oTree.MouseDown
		*** ActiveX Control Event ***
		LPARAMETERS button, shift, x, y
		LOCAL oDummy
		LOCAL lnX, lnY
		
		DO CASE
		CASE button == 1
			TRY
				** We use this for drag&drop operations...
				lnX = x
				lnY = y
				LOCAL nCounter
				FOR nCounter = 1 TO 25		&& For some reason, this call fails every now and then, so we try up to 25 times here...
					THIS.Parent.ConvertPixelsToTwips(@lnX,@lnY)
					IF THIS.Parent.nPixelsPerInchX > 0
						EXIT
					ENDIF
				ENDFOR
		
				oDummy = .NULL.
				IF THIS.Parent.nPixelsPerInchX > 0
					oDummy = THIS.HitTest(lnX,lnY)
				ENDIF
				IF VARTYPE(oDummy) == 'O'
					THIS.Parent.oDragNode = oDummy
				ELSE
					THIS.Parent.oDragNode = .NULL.
				ENDIF
			CATCH 
				* Nothing we can do here...
				THIS.Parent.oDragNode = .NULL.
			ENDTRY
		
		CASE button == 2
			THIS.lRightClick = (Button == 2)
		ENDCASE
		
	ENDPROC

	PROCEDURE oTree.MouseUp
		*** ActiveX Control Event ***
		LPARAMETERS button, shift, x, y
		
		THIS.Parent.oDragNode = .NULL.
		
	ENDPROC

	PROCEDURE oTree.NodeClick
		*** ActiveX Control Event ***
		LPARAMETERS oNode
		
		IF VARTYPE(oNode) == 'O'
			THIS.Parent.ShowDetails(oNode)
		
			IF THIS.lRightClick
				THIS.lRightClick = .F.
		
				THIS.Parent.cCurrentNodeID = oNode.Key
				THIS.Parent.tmrEvent.Enabled = .T.
			ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE oTree.OLECompleteDrag
		#include "foxpro.h"
		LPARAMETERS nEffect
		LOCAL oDropTarget
		LOCAL nMouseXPos
		LOCAL nMouseYPos
		LOCAL lSuccess
		LOCAL lInvalidDropTarget
		LOCAL ARRAY aDropTarget[4]
		LOCAL ARRAY aDropTargetForm[4]
		
		IF THIS.Parent.lDroppedOnCodeWindow
			THIS.Parent.lDroppedOnCodeWindow = .F.
			NODEFAULT
			RETURN
		ENDIF
		
		
		IF AMOUSEOBJ(aDropTargetForm, 1) > 0
			* wrap in a try/catch because if they drop on a Project then
			* we get errors (probably the PEMSTATUS function)
			TRY
				m.lInvalidDropTarget = VARTYPE(aDropTargetForm[2]) == 'O' AND (aDropTargetForm[2].Name == "Toolbox" OR aDropTargetForm[2].Name == "Screen" OR PEMSTATUS(aDropTargetForm[2], "ShowWindow", 1))
			CATCH
				m.lInvalidDropTarget = .T.
			ENDTRY
			IF m.lInvalidDropTarget
				RELEASE aDropTargetForm
				RETURN
			ENDIF
		ENDIF
		
		
		* get the object the mouse is currently positioned over and pass along
		IF AMOUSEOBJ(aDropTarget) > 0
			nMouseXPos = aDropTarget[3]
			nMouseYPos = aDropTarget[4]
		ELSE
			nMouseXPos = 0
			nMouseYPos = 0
		ENDIF
		RELEASE m.aDropTargetForm
		RELEASE m.aDropTarget
		
		IF TYPE("THIS.Parent.oDragNode") == 'O' AND !ISNULL(THIS.Parent.oDragNode)
			THIS.Parent.DropOnDesignSurface(THIS.Parent.oDragNode, nMouseXPos, nMouseYPos)
			NODEFAULT
		ELSE
			NODEFAULT
		ENDIF
		
	ENDPROC

	PROCEDURE oTree.OLESetData
		*** ActiveX Control Event ***
		#include "foxpro.h"
		LPARAMETERS oData, nDataFormat
		LOCAL cDropText
		LOCAL ARRAY aDropTarget[4]
		
		* Clear standard text
		oData.SetData('', 1)
		
		AMOUSEOBJ(aDropTarget)
		IF TYPE("aDropTarget[1]") <> 'O' AND VARTYPE(nDataFormat) == 'N' AND nDataFormat == CF_TEXT
			cDropText = THIS.Parent.DropOnCodeWindow()
		
			IF VARTYPE(cDropText) == 'C'
				oData.SetData(cDropText, 1)
				THIS.Parent.lDroppedOnCodeWindow = .T.
			ENDIF
		
			RELEASE aDropTarget
		ENDIF
		
	ENDPROC

	PROCEDURE oTree.OLEStartDrag
		*** ActiveX Control Event ***
		LPARAMETERS data, allowedeffects
		
		allowedeffects = 1	&& Copy only
	ENDPROC

	PROCEDURE shpSplitterHor.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		IF nButton == 1
			nYCoord = nYCoord - THIS.Parent.nYOffset
		
			IF BETWEEN(nYCoord, 100, THIS.Parent.Height - 20)
				THIS.Parent.SplitterTop = nYCoord
		
				THIS.Parent.ResizeForm()
			ENDIF	
		ENDIF
		
	ENDPROC

	PROCEDURE tmrEvent.Timer
		THIS.Enabled = .F.
		THIS.Reset()
		
		THIS.Parent.RightClickMenu()
		
		
	ENDPROC

	PROCEDURE txtVersion.Init
		this.Value = this.parent.cVersion
		
		RETURN 
	ENDPROC

	PROCEDURE txtVersion.When
		RETURN .F.
	ENDPROC

ENDDEFINE

DEFINE CLASS clinkbutton AS cfoxbutton OF "dataexplorerctrls.vcx" 
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: caption_access
		*m: caption_assign
	*</DefinedPropArrayMethod>

	AutoSize = .T.
	Caption = " Sample Link"
	Height = 23
	Name = "clinkbutton"
	Picture = bitmaps\defaultlink.bmp
	PicturePosition = 1
	SpecialEffect = 2
	Width = 90
	
	PROCEDURE caption_access
		RETURN LTRIM(THIS.Caption)
		
	ENDPROC

	PROCEDURE caption_assign
		LPARAMETERS cCaption
		
		THIS.Caption = ' ' + m.cCaption
		
	ENDPROC

	PROCEDURE Click
		THIS.Parent.OnSelect(THIS.Tag)
		
	ENDPROC

ENDDEFINE

DEFINE CLASS clinksbar AS cfoxcontainer OF "dataexplorerctrls.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Clinkbutton1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdMore" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: addbutton
		*m: clearbuttons
		*m: enabled_assign
		*m: onclick
		*m: onresize
		*m: onselect
		*m: showmore
		*p: nbuttoncnt
		*a: abuttonlist[1,0]
	*</DefinedPropArrayMethod>

	BackStyle = 0
	Height = 24
	Name = "clinksbar"
	nbuttoncnt = 0
	Width = 110

	ADD OBJECT 'Clinkbutton1' AS clinkbutton WITH ;
		Left = 0, ;
		Name = "Clinkbutton1", ;
		Top = 0
		*< END OBJECT: ClassLib="dataexplorer.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdMore' AS cfoxbutton WITH ;
		Caption = "", ;
		Left = 91, ;
		Name = "cmdMore", ;
		Picture = bitmaps\more.bmp, ;
		SpecialEffect = 2, ;
		ToolTipText = "More add-ins...", ;
		Top = 0, ;
		Width = 15
		*< END OBJECT: ClassLib="dataexplorerctrls.vcx" BaseClass="commandbutton" />
	
	PROCEDURE addbutton
		LPARAMETERS cCaption, cToolTip, cImageVal, cID
		LOCAL cTempFile
		
		THIS.nButtonCnt = THIS.nButtonCnt + 1
		DIMENSION THIS.aButtonList[THIS.nButtonCnt, 5]
		
		IF EMPTY(m.cImageVal)
			m.cTempFile = ''
		ELSE
			* must write image to disk in order to display it in a buton
			m.cTempFile = ADDBS(SYS(2023)) + SYS(2015) + ".bmp"
			STRTOFILE(m.cImageVal, m.cTempFile)
		ENDIF
		
		IF VARTYPE(m.cToolTip) <> 'C' OR EMPTY(m.cToolTip)
			m.cToolTip = m.cCaption
		ENDIF
		
		THIS.aButtonList[THIS.nButtonCnt, 1] = m.cCaption
		THIS.aButtonList[THIS.nButtonCnt, 2] = m.cToolTip
		THIS.aButtonList[THIS.nButtonCnt, 3] = m.cTempFile
		THIS.aButtonList[THIS.nButtonCnt, 4] = m.cID
		THIS.aButtonList[THIS.nButtonCnt, 5] = .F.  && Visible or not
		
		
	ENDPROC

	PROCEDURE clearbuttons
		* clear all buttons
		THIS.nButtonCnt = 0
		
		THIS.cmdMore.TabIndex = 1
		
		THIS.OnResize()
		
		
		
	ENDPROC

	PROCEDURE Destroy
		LOCAL i
		LOCAL cSafety
		
		DODEFAULT()
		
		* remove temporary images
		cSafety = SET("SAFETY")
		SET SAFETY OFF
		FOR m.i = 1 TO THIS.nButtonCnt
			IF !EMPTY(THIS.aButtonList[m.i, 3]) AND FILE(THIS.aButtonList[m.i, 3])
				ERASE (THIS.aButtonList[m.i, 3])
			ENDIF
		ENDFOR
		SET SAFETY &cSafety
	ENDPROC

	PROCEDURE enabled_assign
		LPARAMETERS lEnabled
		LOCAL ctrl
		
		THIS.Enabled = m.lEnabled
		
		FOR EACH ctrl IN THIS.Controls
			IF PEMSTATUS(ctrl, "Enabled", 5)
				ctrl.Enabled = lEnabled
			ENDIF
		ENDFOR
		
	ENDPROC

	PROCEDURE Init
		DODEFAULT()
		
		THIS.ClearButtons()
		
		
	ENDPROC

	PROCEDURE onclick
	ENDPROC

	PROCEDURE onresize
		* Show as many link buttons as we can across.
		* If they don't all fit, show a dropdown
		* menu of the remaining links.
		LOCAL i
		LOCAL cObjName
		LOCAL oRef
		LOCAL lLockScreen
		LOCAL nLeft
		LOCAL nMaxWidth
		LOCAL lShowMore
		
		m.lLockScreen = THISFORM.LockScreen
		THISFORM.LockScreen = .T.
		
		THIS.cmdMore.Visible = .F.
		FOR m.i = THIS.ControlCount TO 1 STEP -1
			m.cObjName = THIS.Controls(m.i).Name
			IF UPPER(m.cObjName) <> "CMDMORE"
				THIS.RemoveObject(m.cObjName)
			ENDIF
		ENDFOR
		
		m.lShowMore = .F.
		m.nMaxWidth = THIS.Width - THIS.cmdMore.Width
		
		FOR m.i = 1 TO THIS.nButtonCnt
			THIS.aButtonList[m.i, 5] = .F.
		ENDFOR
		
		m.nLeft = 0
		FOR m.i = 1 TO THIS.nButtonCnt
			m.cObjName = 'o' + SYS(2015)
			THIS.NewObject(m.cObjName, "CLinkButton", "dataexplorer.vcx")
			m.oRef = EVALUATE("THIS." + m.cObjName)
			m.oRef.Caption     = THIS.aButtonList[m.i, 1]
			m.oRef.ToolTipText = THIS.aButtonList[m.i, 2]
			m.oRef.Picture = EVL(THIS.aButtonList[m.i, 3], "defaultlink.bmp")
		
			IF (m.nLeft + m.oRef.Width) > m.nMaxWidth
				m.lShowMore = .T.
		
				&& always display the first button, even if it's truncated
				IF m.i > 1 OR m.oRef.Width <= m.nMaxWidth
					THIS.RemoveObject(m.cObjName)
					EXIT
				ENDIF
				
				m.oRef.AutoSize = .F.
				m.oRef.Width = m.nMaxWidth
			ENDIF
				
			m.oRef.Left     = m.nLeft
			m.oRef.Tag      = THIS.aButtonList[m.i, 4]
			m.oRef.Visible  = .T.
			THIS.aButtonList[m.i, 5] = .T.
		
			m.nLeft = m.nLeft + m.oRef.Width
		ENDFOR
		
		IF m.lShowMore
			THIS.cmdMore.Left = THIS.Width - THIS.cmdMore.Width
			THIS.cmdMore.Visible = .T.
			THIS.cmdMore.TabIndex = THIS.nButtonCnt + 1
		ENDIF
		
		THIS.Enabled = THIS.Enabled
		
		THISFORM.LockScreen = m.lLockScreen
		
		
	ENDPROC

	PROCEDURE onselect
		* overwrite this to handle clicks
		LPARAMETERS cID
		
		
	ENDPROC

	PROCEDURE Resize
		THIS.OnResize()
		
	ENDPROC

	PROCEDURE showmore
		* Show in a menu all of the links that would not
		* fit on the screen.
		LPARAMETERS lKeyboard
		LOCAL i
		LOCAL nBar
		LOCAL cExecCommand
		LOCAL oTempRef
		LOCAL nRow
		LOCAL nCol
		
		oTempRef = THIS
		*!*	nRow = WLROW(THISFORM.Name) + (THIS.Top + THIS.Height + SYSMETRIC(4) + SYSMETRIC(9) - (_SCREEN.Top - _VFP.Top)) / FONTMETRIC(1)
		*!*	nCol = WLCOL(THISFORM.Name) + (THIS.cmdMore.Left - (_SCREEN.Left - _VFP.Left) + SYSMETRIC(3))/FONTMETRIC(6)
		
		* nRow = WLROW(THISFORM.Name) + (THIS.Top + THIS.Height + SYSMETRIC(4) + SYSMETRIC(9) - (_SCREEN.Top - _VFP.Top)) / FONTMETRIC(1)
		nRow = (THIS.Top + THIS.Height) / FONTMETRIC(1)
		nCol = (THIS.cmdMore.Left) 
		
		DEFINE POPUP shortcut SHORTCUT FROM nRow, nCol IN WINDOW (THISFORM.Name)
		
		m.nBar = 1
		FOR m.i = 1 TO THIS.nButtonCnt
			IF !THIS.aButtonList[m.i, 5]  && if not currently visible, then show in our menu
				m.cExecCommand = "oTempRef.OnSelect([" + THIS.aButtonList[m.i, 4] + "])"
				
				DEFINE BAR (m.nBar) OF shortcut PROMPT THIS.aButtonList[m.i, 1] ;
				  MESSAGE (THIS.aButtonList[m.i, 2]) ;
				  PICTURE (THIS.aButtonList[m.i, 3])
		
				ON SELECTION BAR (m.nBar) OF shortcut &cExecCommand
		
				m.nBar = m.nBar + 1
			ENDIF
		ENDFOR
		
		ACTIVATE POPUP shortcut
		RELEASE POPUPS shortcut
		
	ENDPROC

	PROCEDURE cmdMore.Click
		THIS.Parent.ShowMore()
		
	ENDPROC

ENDDEFINE

DEFINE CLASS csqlconnectionproperties AS cfoxcontainer OF "dataexplorerctrls.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="shpBorder" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="spnConnectTimeout" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cfoxlabel3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cfoxlabel1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cfoxlabel2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="spnQueryTimeout" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: connecttimeout_access
		*m: connecttimeout_assign
		*m: querytimeout_access
		*m: querytimeout_assign
		*p: connecttimeout
		*p: querytimeout
	*</DefinedPropArrayMethod>

	connecttimeout = 0
	Height = 79
	Name = "csqlconnectionproperties"
	querytimeout = 0
	Width = 267

	ADD OBJECT 'Cfoxlabel1' AS cfoxlabel WITH ;
		Caption = "Co\<nnection timeout (sec):", ;
		Height = 15, ;
		Left = 21, ;
		Name = "Cfoxlabel1", ;
		TabIndex = 2, ;
		Top = 25, ;
		Width = 156, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="dataexplorerctrls.vcx" BaseClass="label" />

	ADD OBJECT 'Cfoxlabel2' AS cfoxlabel WITH ;
		Caption = "\<Query timeout (sec):", ;
		Height = 15, ;
		Left = 20, ;
		Name = "Cfoxlabel2", ;
		TabIndex = 4, ;
		Top = 48, ;
		Width = 156, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="dataexplorerctrls.vcx" BaseClass="label" />

	ADD OBJECT 'Cfoxlabel3' AS cfoxlabel WITH ;
		Alignment = 2, ;
		BackStyle = 1, ;
		Caption = "Connection Properties", ;
		Height = 15, ;
		Left = 10, ;
		Name = "Cfoxlabel3", ;
		Style = 3, ;
		TabIndex = 1, ;
		Top = 0, ;
		Width = 114, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="dataexplorerctrls.vcx" BaseClass="label" />

	ADD OBJECT 'shpBorder' AS cfoxshape WITH ;
		Height = 69, ;
		Left = 1, ;
		Name = "shpBorder", ;
		Top = 8, ;
		Width = 265, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="dataexplorerctrls.vcx" BaseClass="shape" />

	ADD OBJECT 'spnConnectTimeout' AS cfoxspinner WITH ;
		Height = 21, ;
		InputMask = "###", ;
		KeyboardHighValue = 600, ;
		KeyboardLowValue = 0, ;
		Left = 178, ;
		Name = "spnConnectTimeout", ;
		SpinnerHighValue = 600.00, ;
		SpinnerLowValue = 0.00, ;
		TabIndex = 3, ;
		Top = 21, ;
		Width = 58, ;
		ZOrderSet = 1, ;
		_memberdata = <VFPData>

		</VFPData>
		*< END OBJECT: ClassLib="dataexplorerctrls.vcx" BaseClass="spinner" />

	ADD OBJECT 'spnQueryTimeout' AS cfoxspinner WITH ;
		Height = 21, ;
		InputMask = "###", ;
		KeyboardHighValue = 600, ;
		KeyboardLowValue = 0, ;
		Left = 178, ;
		Name = "spnQueryTimeout", ;
		SpinnerHighValue = 600.00, ;
		SpinnerLowValue = 0.00, ;
		TabIndex = 5, ;
		Top = 45, ;
		Width = 58, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="dataexplorerctrls.vcx" BaseClass="spinner" />
	
	PROCEDURE connecttimeout_access
		*To do: Modify this routine for the Access method
		RETURN THIS.spnConnectTimeout.Value
		
	ENDPROC

	PROCEDURE connecttimeout_assign
		LPARAMETERS vNewVal
		*To do: Modify this routine for the Assign method
		THIS.spnConnectTimeout.Value = m.vNewVal
		
	ENDPROC

	PROCEDURE Init
		DODEFAULT()
		
		THIS.shpBorder.Width = THIS.Width - 2
	ENDPROC

	PROCEDURE querytimeout_access
		*To do: Modify this routine for the Access method
		RETURN THIS.spnQueryTimeout.Value
		
	ENDPROC

	PROCEDURE querytimeout_assign
		LPARAMETERS vNewVal
		*To do: Modify this routine for the Assign method
		THIS.spnQueryTimeout.Value = m.vNewVal
		
	ENDPROC

ENDDEFINE

DEFINE CLASS cwebbrowser AS olecontrol 
 	*< CLASSDATA: Baseclass="olecontrol" Timestamp="" Scale="Pixels" Uniqueid="" Nombre="cwebbrowser" Parent="" ObjName="cwebbrowser" OLEObject="C:\WINNT\System32\shdocvw.dll" Value="0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAEAAAAgAAAAEAAAD+////AAAAAAAAAAD////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////9/////vbwBvAHQAIABFAG4AdAByAHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAUA//////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADCyxXv+TsQBAwAAAEABAAAAAAAAAwBPAGwAZQBPAGIAagBlAGMAdABEAGEAdABhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAgEDAAAAAgAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArAAAAAAAAAADAEEAYwBjAGUAcwBzAE8AYgBqAFMAaQB0AGUARABhAHQAYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAA4AAAAAAAAAAMAQwBoAGEAbgBnAGUAZABQAHIAbwBwAHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAQAAAAAAAAAAwh+VaICjTQEalrAMBP1wWiTAAAAN4gAACJEwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATAAAAAAAAAAAAAAAOAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAABsHwEAAAAAAAEAAIAAAAAANikAAAAAAADMGwEAAAAAAFzrAAAAAAAAqAUBAAAAAAAOKwAAAAAAANAEAQAAAAAAJCoAAAAAAAABAAAA4NBXAHM1zxGuaQgAKy4SYggAAAAAAAAATAAAAAEUAgAAAAAAwAAAAAAAAEaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdPEAAAAAAAAS8gAAAAAAAODyAAAAAAAArPMAAAAAAAB29AAAAAAAAET1AAAAAAAACvYAAAAAAADS9gAAAAAAAJ73AAAAAAAAaPgAAAAAAAA0+QAAAAAAAAD6AAAAAAAAkBwBAAAAAADEEQEAAAAAABwOAQAAAAAARB0BAAAAAADOsQAAAAAAAPoQAQAAAAAAzhUBAAAAAACCEgEAAAAAAD4TAQAAAAAA7h0BAAAAAAAmOgAAAAAAAH4gAQAAAAAAINAAAAAAAADuIQEAAAAAAA==" />

	*<DefinedPropArrayMethod>
		*m: getfonttag
		*m: htmlencode
		*m: write
		*p: cfontface
		*p: cstyletag
		*p: nbackcolor
		*p: nfontsize
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	cfontface = Tahoma
	cstyletag = <fb2p_value><STYLE>&#13;	BODY {&#13;	font-family:#FONTNAME#;&#13;	font-size:#FONTSIZE#pt;&#13;	margin-top:0px;&#13;	margin-left:2px;&#13;	margin-right:2px;	&#13;	margin-bottom:2px;&#13;	}  &#13;	TD   {&#13;	font-size:#FONTSIZE#pt;&#13;	vertical-align:top;&#13;	padding:0&#13;	}&#13;	a:link {  color: #0033CC;text-decoration: none}&#13;	a:visited {   text-decoration: none}&#13;	a:hover {  color: #CC0000;text-decoration: underline}&#13;	A {  text-decoration: underline; font-family: Verdana, Arial, Helvetica, sans-serif; color: #0066FF			&#13;	}&#13;	&#13;	A.toggle:link {  color: #000000;text-decoration: none}&#13;	A.toggle:visited {   text-decoration: none}&#13;	A.toggle:hover {  color: #000000;text-decoration: none}&#13;	A.toggle {  text-decoration: none; color: #000000}&#13;</STYLE>	&#13;</fb2p_value>
	Height = 189
	Name = "cwebbrowser"
	nbackcolor = 16777215
	nfontsize = 11
	Width = 318
	_memberdata = <VFPData>

		</VFPData>		&& XML Metadata for customizable properties
	
	PROCEDURE BeforeNavigate2
		*** ActiveX Control Event ***
		LPARAMETERS pdisp, url, flags, targetframename, postdata, headers, cancel
		
		IF url = "vfps://"
			Cancel = .T.
		
			url = lower(url)
			DO CASE
			CASE url="vfps://close/"
				THISFORM.Release()
			OTHERWISE
			ENDCASE
		ENDIF
		
	ENDPROC

	PROCEDURE getfonttag
		RETURN [<font style="FONT-SIZE: ]+TRANSFORM(INT(THIS.nFontSize))+[px; FONT-FAMILY: ] + THIS.cFontFace + [; FONT-STYLE: normal">]
		
	ENDPROC

	PROCEDURE htmlencode
		LPARAMETERS cHTML
		
		*!*	cHTML = STRTRAN(cHTML, '&', "&amp;")
		*!*	cHTML = STRTRAN(cHTML, '<', "&lt;")
		*!*	cHTML = STRTRAN(cHTML, '>', "&gt;")
		
		RETURN cHTML
		
		
		
	ENDPROC

	PROCEDURE Init
		THIS.Navigate("about:blank")
		
		
	ENDPROC

	PROCEDURE Refresh
		*** ActiveX Control Method ***
		NODEFAULT
		
	ENDPROC

	PROCEDURE write
		LPARAMETERS cHTML
		LOCAL cBGColor
		LOCAL cScript
		
		cHTML = STRTRAN(cHTML,CHR(0),'')
		
		
		IF NOT "<body" $ LOWER(cHTML)
			cBGColor = RIGHT(TRANSFORM(THIS.nBackColor,"@0"),6)
			cBGColor = [#] + SUBSTR(cBGColor,5,2) + SUBSTR(cBGColor,3,2) + SUBSTR(cBGColor,1,2)
		
			TEXT TO cScript NOSHOW PRETEXT ' '
				<SCRIPT ID=clientEventHandlersJS LANGUAGE=javascript>
				document.oncontextmenu = 
				function document_oncontextmenu() {return false;};
		
				document.onkeypress = 
				function (evt) {
				  if (event.keyCode == 27)
				    location.href = "vfps://close/";
		
				  return true;
				};
		
				</SCRIPT>
			ENDTEXT
			cHTML = [<html><head>] + cScript + [</head>] + THIS.cStyleTag + [<body bgcolor="] + cBGColor + [" scroll="auto"><font style="FONT-SIZE: ]+TRANSFORM(INT(THIS.nFontSize))+[px; FONT-FAMILY: ] + THIS.cFontFace + [; FONT-STYLE: normal">] + cHTML + [</font></body></html>]
		ENDIF
		
		cHTML = STRTRAN(cHTML, "#FONTNAME#", THIS.cFontFace, -1, -1, 1)
		cHTML = STRTRAN(cHTML, "#FONTSIZE#", TRANSFORM(THIS.nFontSize), -1, -1, 1)
		
		DO WHILE NOT VARTYPE(THIS.Document) = "O"
		ENDDO
		
		THIS.Document.Open()
		THIS.Document.Write(cHTML)
		THIS.Document.Close()
		
		THIS.Document.body.topmargin = 1
		THIS.Document.body.leftmargin = 3
		
		RETURN .T.
	ENDPROC

ENDDEFINE
