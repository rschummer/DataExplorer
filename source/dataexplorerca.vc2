*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="dataexplorerca.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS ccursoradapter AS cursoradapter 
 	*< CLASSDATA: Baseclass="cursoradapter" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: buildsqlschema		&& Build cursor schema for SQL Server.
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	BufferModeOverride = 5
	DataSourceType = "ODBC"
	FetchSize = -1
	Height = 22
	Name = "ccursoradapter"
	Width = 23
	_memberdata = <VFPData>
		<memberdata name="buildsqlschema" display="BuildSQLSchema"/>
		</VFPData>		&& XML Metadata for customizable properties
	
	PROCEDURE BeforeCursorFill
		LPARAMETERS luseCursorSchema, lNoDataOnLoad, cSelectCmd
		Local lcSQL
		
		* User may enter Fox-style SQL so modify it to be compatible with SQL Server
		If This.DataSourceType = "ODBC"
			
			lcSQL =	cSelectCmd
		
			* Convert double-quotes to single quotes
			lcSQL = Strtran(lcSQL, ["], ['])
		
			* Convert double-equal to single equal
			lcSQL = Strtran(lcSQL, "==", "=")
		
			* Convert booleans
			lcSQL = Strtran(lcSQL, ".t.", "1", 1, -1, 1)
			lcSQL = Strtran(lcSQL, ".f.", "0", 1, -1, 1)
		
			* Convert date delimiters to single quotes
			lcSQL = Strtran(lcSQL, "{^", "'")	&& strict data format
			lcSQL = Strtran(lcSQL, "{", "'")
			lcSQL = Strtran(lcSQL, "}", "'")
		
			* Convert a few common functions
			lcSQL = Strtran(lcSQL, "Nvl(", "IsNull(", 1, -1, 1)
			lcSQL = Strtran(lcSQL, "Date()", "GetDate()", 1, -1, 1)
			lcSQL = Strtran(lcSQL, "Substr(", "Substring(", 1, -1, 1)
			lcSQL = Strtran(lcSQL, "Chr(", "Char(", 1, -1, 1)
			
			cSelectCmd = lcSQL	
		
		EndIf 
		
		Return DoDefault(luseCursorSchema, lNoDataOnLoad, cSelectCmd)
	ENDPROC

	PROCEDURE buildsqlschema		&& Build cursor schema for SQL Server.
		* Build cursor schema for SQL Server.
		* VarChar(Max) does not translate automatically to Memo field, so have to build schema for applicable CAs.
		* Also populates fields to make CA updatable.
		* Some of this code was taken and modified from CursorAdapter builder.
		Local lnFields, lnField, lcSchema, lcFieldName, lcType, lcLen, lcDecimals, lnCurrentArea
		Local array laFields[1]
		
		If This.DataSourceType = "ODBC" and Empty(This.CursorSchema)
			
			lnCurrentArea = Select()
			
			If This.CursorFill(.f., .t.)
			
				lnFields = AFields(laFields)
				lcSchema = ''
				For lnField = 1 to lnFields
					lcFieldName = laFields[lnField, 1]
					lcType     = laFields[lnField, 2]
					lcLen      = transform(laFields[lnField, 3])
					lcDecimals = transform(laFields[lnField, 4])
					
					* Convert varchar(MAX) to Memo
					If lcType = "C" and lcLen == "0"
						lcType = "M"
					EndIf 
					
					lcSchema   = lcSchema + iif(empty(lcSchema), '', ', ') + ;
						laFields[lnField, 1] + ' ' + lcType
					do case
						case lcType = 'C'
							lcSchema = lcSchema + '(' + lcLen + ')'
						case lcType $ 'NF'
							lcSchema = lcSchema + '(' + lcLen + ', ' + ;
								lcDecimals + ')'
						case lcType = 'B'
							lcSchema = lcSchema + '(' + lcDecimals + ')'
					endcase
		
					* Make cursor updatable. 
					* We don't know PK, so put all fields in KeyFieldList. That's basically what SSMS does in Edit mode.
					This.KeyFieldList = This.KeyFieldList + lcFieldName
					This.UpdatableFieldList = This.UpdatableFieldList + lcFieldName
					This.UpdateNameList = This.UpdateNameList + lcFieldName + " " + This.Alias + ".[" + lcFieldName + "]"
					If lnField < lnFields
						* Add comma
						This.KeyFieldList = This.KeyFieldList + ", "
						This.UpdatableFieldList = This.UpdatableFieldList + ", "
						This.UpdateNameList = This.UpdateNameList + ", "
					EndIf 
					
				EndFor 
		
				This.Tables = This.Alias
				This.CursorSchema = lcSchema
				This.UseCursorSchema = .t.
				Use 
			EndIf 
		
			Select (lnCurrentArea) 
		
		EndIf 
	ENDPROC

ENDDEFINE
