*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="browseform.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="1" />

	DataSource = .NULL.
	Height = 0
	Left = 0
	Name = "Dataenvironment"
	Top = 0
	Width = 0

ENDDEFINE

DEFINE CLASS frmbrowseform AS cfoxform OF "dataexplorerctrls.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="grdBrowse" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkDeleted" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdClose" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: lshowdeleted_assign
		*m: setcolumnsreadonly		&& This method is called after the grid recordsource is set to determine which columns need to be read-only (like autoincrementing integers).
		*p: colddeleted		&& This property retains the initial SET("Deleted") so it can be reset when the form is closed.
		*p: lshowdeleted		&& This property determines if the deleted records from the browse recordsource are displayed.
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	AlwaysOnTop = .T.
	BindControls = .F.
	Caption = "Browse"
	colddeleted = 		&& This property retains the initial SET("Deleted") so it can be reset when the form is closed.
	cresourceid = DATAEXPLORER
	Desktop = .T.
	DoCreate = .T.
	Height = 303
	KeyPreview = .T.
	Left = 0
	lshowdeleted = .T.		&& This property determines if the deleted records from the browse recordsource are displayed.
	MinButton = .F.
	Name = "frmBrowseForm"
	ShowTips = .T.
	Top = 0
	Visible = .F.
	Width = 482
	WindowType = 1
	_memberdata = <VFPData>
		<memberdata name="colddeleted" type="property" display="cOldDeleted"/>
		</VFPData>		&& XML Metadata for customizable properties

	ADD OBJECT 'chkDeleted' AS cfoxcheckbox WITH ;
		Alignment = 0, ;
		Caption = "Show deleted records?", ;
		ControlSource = "thisform.lShowDeleted", ;
		Height = 17, ;
		Left = 105, ;
		Name = "chkDeleted", ;
		Top = 5, ;
		Value = .F., ;
		Width = 219
		*< END OBJECT: ClassLib="dataexplorerctrls.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cmdClose' AS cfoxbutton WITH ;
		Cancel = .T., ;
		Caption = "Close", ;
		Left = 1, ;
		Name = "cmdClose", ;
		TabIndex = 2, ;
		Top = 1, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="dataexplorerctrls.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'grdBrowse' AS cquerygrid WITH ;
		Anchor = 15, ;
		GridLineColor = 192,192,192, ;
		Height = 276, ;
		Left = 2, ;
		Name = "grdBrowse", ;
		Top = 24, ;
		Width = 478, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="dataexplorerctrls.vcx" BaseClass="grid" />
	
	PROCEDURE Destroy
		LOCAL lcDeleted
		
		DODEFAULT()
		
		lcDeleted = this.cOldDeleted
		SET DELETED &lcDeleted
		
		RETURN
	ENDPROC

	PROCEDURE Init
		LPARAMETERS lReadOnly
		LOCAL oDataExplorerEngine
		
		DODEFAULT()
		
		oDataExplorerEngine = NEWOBJECT("DataExplorerEngine", "DataExplorerEngine.prg")
		
		THIS.FontName   = oDataExplorerEngine.cFontName
		THIS.FontSize   = oDataExplorerEngine.nFontSize
		THIS.FontBold   = 'B' $ oDataExplorerEngine.cFontStyle
		THIS.FontItalic = 'I' $ oDataExplorerEngine.cFontStyle
		
		THIS.Caption = LOWER(ALIAS())
		
		THIS.grdBrowse.RecordSource = ALIAS()
		THIS.grdBrowse.ReadOnly = lReadOnly
		
		IF lReadOnly
			THIS.grdBrowse.DeleteMark = .F.
		ENDIF
		
		THIS.BindControls = .T.
		
		WITH THIS.grdBrowse
		   .FontName   = THIS.FontName
		   .FontSize   = THIS.FontSize
		   .FontBold   = THIS.FontBold
		   .FontItalic = THIS.FontItalic
		
		   * RAS 28-Dec-2006, fixed problem with grid headers not respecting the 
		   * font attributes selected by the end user of the browse form.
		   FOR EACH loColumn IN .Columns FOXOBJECT 
		      loColumn.Header1.FontName   = this.FontName
		      loColumn.Header1.FontSize   = this.FontSize
		      loColumn.Header1.FontBold   = this.FontBold
		      loColumn.Header1.FontItalic = this.FontItalic
		   ENDFOR 
		ENDWITH
		
		
		* RAS 19-Dec-2006, added checkbox to toggle deleted records
		this.lShowDeleted = NOT (SET("Deleted") = "ON")
		this.chkDeleted.Refresh()
		
		* RAS - Make call to set autoincrementing columns readonly
		this.SetColumnsReadOnly()
		
		RETURN
		
	ENDPROC

	PROCEDURE KeyPress
		LPARAMETERS tnKeyCode, tnShiftAltCtrl
		
		IF this.grdBrowse.ReadOnly
		   * Nothing to do
		ELSE
		   * Added for Sedna
		   * Handle the Ctrl+Y to add record to the BROWSE
		   IF tnShiftAltCtrl = 2 AND tnKeyCode = 25
		      APPEND BLANK IN (this.grdBrowse.RecordSource)
		      this.grdBrowse.Refresh()
		   ENDIF
		ENDIF
		
		RETURN
	ENDPROC

	PROCEDURE Load
		LOCAL lcDeleted
		
		this.cOldDeleted = SET("Deleted")
		
		DODEFAULT()
		
		RETURN
	ENDPROC

	PROCEDURE lshowdeleted_assign
		LPARAMETERS tlShowDeleted
		
		this.lShowDeleted = tlShowDeleted
		
		IF this.lShowDeleted = .F.
		   SET DELETED ON
		ELSE
		   SET DELETED OFF
		ENDIF
		
		this.grdBrowse.Refresh()
		
		RETURN
		
	ENDPROC

	PROCEDURE setcolumnsreadonly		&& This method is called after the grid recordsource is set to determine which columns need to be read-only (like autoincrementing integers).
		* This method was added for Sedna. The entire purpose is to make any columns
		* read only if the Visual FoxPro does not allow them to be changed (like an
		* autoincrementing integer column.
		LOCAL lnColumns
		
		#DEFINE ccAFIELDS_AUTOINC_NEXT_VALUE      17
		#DEFINE ccAFIELDS_AUTOINC_STEP            18
		
		DIMENSION laStructure[1]
		
		IF EMPTY(this.grdBrowse.RecordSource)
		   * Nothing to do
		ELSE
		   lnGridColumns  = this.grdBrowse.ColumnCount 
		   lcAlias        = this.grdBrowse.RecordSource
		
		   lnAliasColumns = AFIELDS(laStructure, lcAlias)
		
		   * Check all columns in the grid
		   FOR lnI = 1 TO lnGridColumns
		      lcControlSource = this.grdBrowse.Columns[lnI].ControlSource
		      lcControlSource = JUSTEXT(lcControlSource)
		
		      FOR lnY = 1 TO lnAliasColumns
		         * See if the controlsource is in the structure
		         IF UPPER(laStructure[lnY, 1]) == UPPER(lcControlSource)
		            * See if the column is autoincrementing
		            IF laStructure[lnY, ccAFIELDS_AUTOINC_NEXT_VALUE] > 0
		               this.grdBrowse.Columns[lnI].ReadOnly = .T.
		            ENDIF
		
		            EXIT
		         ENDIF
		      ENDFOR
		   ENDFOR
		ENDIF
		
		RETURN
	ENDPROC

	PROCEDURE cmdClose.Click
		THISFORM.Release()
		
	ENDPROC

ENDDEFINE
