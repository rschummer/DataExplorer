*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="browseform2.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
#INCLUDE "dataexplorer.h"

DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="1" />

	DataSource = .NULL.
	Height = 200
	Left = 1
	Name = "Dataenvironment"
	Top = 220
	Width = 520

ENDDEFINE

DEFINE CLASS frmbrowseform AS cfoxform OF "dataexplorerctrls.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="grdBrowse" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkDeleted" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdQuery" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdSave" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCancel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cusGridExtras" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtFilter" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="imgClearFilter" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblFilter" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: cancelchanges		&& This method is called to cancel any changes you make to the data in the live BROWSE.
		*m: cdatasource_assign
		*m: datachanged		&& This method checks to see if data was changed in the cursor. Returns true if uncomitted changes exist, otherwise returns false.
		*m: lshowdeleted_assign
		*m: querydata		&& This method is called to query the data from a SQL backend.
		*m: savechanges		&& This method is called to save the changes made in the BROWSE back to the source table.
		*m: setcolumnsreadonly		&& This method is called after the grid recordsource is set to determine which columns need to be read-only (like autoincrementing integers).
		*m: setgridextras		&& This method is called to set up the Grid Extras feature set for the main Browse grid.
		*p: cdatasource		&& This property indicates what type of datasource the form is working with. *** cEnum VFP; SQL; ADO; Oracle
		*p: colddeleted		&& This property retains the initial SET("Deleted") so it can be reset when the form is closed.
		*p: coldsysformats		&& This property retains the original settings for SET SYSFORMATS, which is reset when the form is closed.
		*p: cowner		&& This property is the owner of the tablle/database, used for SQL Server connections.
		*p: ctable		&& This property is the name of the table to be opened for SQL Server connections.
		*p: lshowdeleted		&& This property determines if the deleted records from the browse recordsource are displayed.
		*p: nsqlhandle		&& This property is the handle to the SQL Server connection.
		*p: oca		&& This property is a reference for the cursor adapter used for SQL Server connections.
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	AlwaysOnTop = .T.
	BindControls = .F.
	Caption = "Browse"
	cdatasource = 		&& This property indicates what type of datasource the form is working with. *** cEnum VFP; SQL; ADO; Oracle
	colddeleted = 		&& This property retains the initial SET("Deleted") so it can be reset when the form is closed.
	coldsysformats = 		&& This property retains the original settings for SET SYSFORMATS, which is reset when the form is closed.
	cowner = 		&& This property is the owner of the tablle/database, used for SQL Server connections.
	cresourceid = DATAEXPLORER
	ctable = 		&& This property is the name of the table to be opened for SQL Server connections.
	Desktop = .T.
	DoCreate = .T.
	Height = 301
	KeyPreview = .T.
	Left = 0
	lshowdeleted = .T.		&& This property determines if the deleted records from the browse recordsource are displayed.
	MinButton = .F.
	Name = "frmBrowseForm"
	nsqlhandle = 0		&& This property is the handle to the SQL Server connection.
	oca = .NULL.		&& This property is a reference for the cursor adapter used for SQL Server connections.
	ShowTips = .T.
	Top = 0
	Visible = .F.
	Width = 482
	WindowType = 1
	_memberdata = <VFPData>
		<memberdata name="colddeleted" type="property" display="cOldDeleted"/>
		<memberdata name="coldsysformats" type="property" display="cOldSysFormats"/>
		<memberdata name="cowner" type="property" display="cOwner"/>
		<memberdata name="nsqlhandle" type="property" display="nSQLHandle"/>
		<memberdata name="ctable" type="property" display="cTable"/>
		<memberdata name="oca" type="property" display="oCA"/>
		<memberdata name="setgridextras" type="method" display="SetGridExtras"/>
		<memberdata name="datachanged" type="method" display="DataChanged"/>
		<memberdata name="savechanges" type="method" display="SaveChanges"/>
		<memberdata name="cdatasource" type="property" display="cDataSource"/>
		<memberdata name="cdatasource_assign" type="method" display="cDataSource_Assign"/>
		<memberdata name="cancelchanges" type="method" display="CancelChanges"/>
		<memberdata name="querydata" type="method" display="QueryData"/>
		</VFPData>		&& XML Metadata for customizable properties

	ADD OBJECT 'chkDeleted' AS cfoxcheckbox WITH ;
		Alignment = 0, ;
		Caption = "Show deleted records?", ;
		ControlSource = "thisform.lShowDeleted", ;
		Height = 17, ;
		Left = 4, ;
		Name = "chkDeleted", ;
		Top = 5, ;
		Value = .F., ;
		Width = 146
		*< END OBJECT: ClassLib="dataexplorerctrls.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cmdCancel' AS cfoxbutton WITH ;
		Anchor = 8, ;
		Caption = "", ;
		Height = 23, ;
		Left = 458, ;
		Name = "cmdCancel", ;
		Picture = undo.bmp, ;
		TabIndex = 5, ;
		ToolTipText = "Undo Changes", ;
		Top = 0, ;
		Width = 22, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="dataexplorerctrls.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdQuery' AS cfoxbutton WITH ;
		Anchor = 8, ;
		Caption = "", ;
		Default = .T., ;
		Height = 23, ;
		Left = 416, ;
		Name = "cmdQuery", ;
		Picture = bitmaps\run.bmp, ;
		TabIndex = 2, ;
		ToolTipText = "Run Query", ;
		Top = 0, ;
		Visible = .F., ;
		Width = 22, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="dataexplorerctrls.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdSave' AS cfoxbutton WITH ;
		Anchor = 8, ;
		Caption = "", ;
		Height = 23, ;
		Left = 437, ;
		Name = "cmdSave", ;
		Picture = save.bmp, ;
		TabIndex = 4, ;
		ToolTipText = "Save Changes", ;
		Top = 0, ;
		Width = 22, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="dataexplorerctrls.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cusGridExtras' AS gridextra WITH ;
		Height = 17, ;
		Left = 391, ;
		Name = "cusGridExtras", ;
		Top = 5, ;
		Width = 19
		*< END OBJECT: ClassLib="gridextras\gridextras.vcx" BaseClass="custom" />

	ADD OBJECT 'edtFilter' AS cfoxeditbox WITH ;
		Anchor = 10, ;
		Height = 21, ;
		Left = 32, ;
		Name = "edtFilter", ;
		TabIndex = 1, ;
		Top = 1, ;
		Visible = .F., ;
		Width = 384
		*< END OBJECT: ClassLib="dataexplorerctrls.vcx" BaseClass="editbox" />

	ADD OBJECT 'grdBrowse' AS cquerygrid WITH ;
		Anchor = 15, ;
		GridLineColor = 192,192,192, ;
		Height = 276, ;
		Left = 2, ;
		Name = "grdBrowse", ;
		Top = 24, ;
		Width = 478, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="dataexplorerctrls.vcx" BaseClass="grid" />

	ADD OBJECT 'imgClearFilter' AS cfoximage WITH ;
		Anchor = 8, ;
		Height = 16, ;
		Left = 397, ;
		Name = "imgClearFilter", ;
		Picture = bitmaps\error.bmp, ;
		ToolTipText = "Clear Filter", ;
		Top = 4, ;
		Visible = .F., ;
		Width = 16
		*< END OBJECT: ClassLib="dataexplorerctrls.vcx" BaseClass="image" />

	ADD OBJECT 'lblFilter' AS cfoxlabel WITH ;
		AutoSize = .T., ;
		Caption = "Filter:", ;
		Left = 2, ;
		Name = "lblFilter", ;
		TabIndex = 7, ;
		Top = 6, ;
		Visible = .F.
		*< END OBJECT: ClassLib="dataexplorerctrls.vcx" BaseClass="label" />
	
	PROCEDURE cancelchanges		&& This method is called to cancel any changes you make to the data in the live BROWSE.
		* Cancel changes to data
		TABLEREVERT(.T., this.cTable)
		this.grdBrowse.Refresh()
		RETURN 
	ENDPROC

	PROCEDURE cdatasource_assign
		lparameters tuNewValue
		This.cDataSource = tuNewValue
		
	ENDPROC

	PROCEDURE datachanged		&& This method checks to see if data was changed in the cursor. Returns true if uncomitted changes exist, otherwise returns false.
		LOCAL llReturnVal
		
		* Detect if changes were made.
		IF USED(this.cTable) AND GETNEXTMODIFIED(0, this.cTable) <> 0
		   llReturnVal = .T.
		ELSE
		   llReturnVal = .F.
		ENDIF
		
		RETURN m.llReturnVal
	ENDPROC

	PROCEDURE Destroy
		LOCAL lcDeleted, ;
		      lcSysformats
		
		DODEFAULT()
		
		lcDeleted = this.cOldDeleted
		SET DELETED &lcDeleted
		
		lcSysformats = this.cOldSysFormats 
		SET SYSFORMATS &lcSysformats
		
		RETURN
	ENDPROC

	PROCEDURE Init
		*LPARAMETERS lReadOnly
		LPARAMETERS tcDataSource, tlReadOnly, tnSQLHandle, tcOwner, tcTable
		
		LOCAL oDataExplorerEngine, ;
		      lcAlias
		
		IF TYPE("m.tcDataSource") # "C"
		   m.tcDataSource = "vfp"
		ENDIF 
		
		m.tcDataSource   = LOWER(m.tcDataSource) 
		this.cDataSource = m.tcDataSource
		
		DO CASE
		   CASE this.cDataSource = "vfp"
		      lcAlias                 = ALIAS()
		      thisform.cTable         = lcAlias
		
		      SET MULTILOCKS ON 
		      CURSORSETPROP("Buffering", 5, lcAlias)
		
		   
		   CASE this.cDataSource = "sql"
		      thisform.nSQLHandle     = tnSQLHandle
		      thisform.cOwner         = ALLTRIM(tcOwner)
		      thisform.cTable         = ALLTRIM(tcTable)
		
		      thisform.oCA            = NEWOBJECT("cCursorAdapter", "DataExplorerCA.vcx")
		      thisform.oCA.DataSource = thisform.nSQLHandle
		      thisform.oCA.Alias      = thisform.cTable
		      thisform.QueryData("SELECT TOP 100 * FROM " + IIF(!EMPTY(thisform.cOwner), ;
		                                                        "[" + thisform.cOwner + "].", SPACE(0)) + ;
		                                                        "[" + thisform.cTable + "]")
		
		      thisform.Caption        = thisform.cTable + " (Top 100 Records)"
		      lcAlias                 = thisform.oCA.Alias
		      
		      this.cmdQuery.Visible       = .T.
		      this.lblFilter.Visible      = .T.
		      this.edtFilter.Visible      = .T.
		      this.imgClearFilter.Visible = .T.
		      this.chkDeleted.Visible     = .F.
		      
		   CASE this.cDataSource = "ado"
		   
		   CASE this.cDataSource = "oracle"
		
		   OTHERWISE
		       * No other choices
		
		ENDCASE
		
		DODEFAULT()
		
		m.oDataExplorerEngine = NEWOBJECT("DataExplorerEngine", "DataExplorerEngine.prg")
		
		this.FontName   = m.oDataExplorerEngine.cFontName
		this.FontSize   = m.oDataExplorerEngine.nFontSize
		this.FontBold   = 'B' $ m.oDataExplorerEngine.cFontStyle
		this.FontItalic = 'I' $ m.oDataExplorerEngine.cFontStyle
		
		this.Caption = LOWER(ALIAS())
		
		this.grdBrowse.RecordSource = ALIAS()
		this.grdBrowse.ReadOnly     = m.tlReadOnly
		
		IF m.tlReadOnly
			THIS.grdBrowse.DeleteMark = .F.
		ENDIF
		
		THIS.BindControls = .T.
		
		WITH THIS.grdBrowse
		   .FontName   = this.FontName
		   .FontSize   = this.FontSize
		   .FontBold   = this.FontBold
		   .FontItalic = this.FontItalic
		
		   * RAS 28-Dec-2006, fixed problem with grid headers not respecting the 
		   * font attributes selected by the end user of the browse form.
		   FOR EACH m.loColumn IN .Columns FOXOBJECT 
		      m.loColumn.Header1.FontName   = this.FontName
		      m.loColumn.Header1.FontSize   = this.FontSize
		      m.loColumn.Header1.FontBold   = this.FontBold
		      m.loColumn.Header1.FontItalic = this.FontItalic
		   ENDFOR 
		ENDWITH
		
		
		* RAS 19-Dec-2006, added checkbox to toggle deleted records
		this.lShowDeleted = NOT (SET("Deleted") = "ON")
		this.chkDeleted.Refresh()
		
		* RAS - Make call to set autoincrementing columns readonly
		this.SetColumnsReadOnly()
		
		* RAS 3-July-2011, added in Craig Boyd's GridExtras functionality
		*< this.SetGridExtras()
		
		RETURN
		
	ENDPROC

	PROCEDURE KeyPress
		LPARAMETERS tnKeyCode, tnShiftAltCtrl
		
		IF this.grdBrowse.ReadOnly
		   * Nothing to do
		ELSE
		   * Added for Sedna
		   * Handle the Ctrl+Y to add record to the BROWSE
		   IF tnShiftAltCtrl = 2 AND tnKeyCode = 25
		      APPEND BLANK IN (this.grdBrowse.RecordSource)
		      this.grdBrowse.Refresh()
		   ENDIF
		ENDIF
		
		RETURN
	ENDPROC

	PROCEDURE Load
		LOCAL lcDeleted
		
		this.cOldDeleted    = SET("Deleted")
		this.cOldSysFormats = SET("Sysformats")
		
		DODEFAULT()
		
		RETURN
	ENDPROC

	PROCEDURE lshowdeleted_assign
		LPARAMETERS tlShowDeleted
		
		this.lShowDeleted = tlShowDeleted
		
		IF this.lShowDeleted = .F.
		   SET DELETED ON
		ELSE
		   SET DELETED OFF
		ENDIF
		
		this.grdBrowse.Refresh()
		
		RETURN
		
	ENDPROC

	PROCEDURE querydata		&& This method is called to query the data from a SQL backend.
		LPARAMETERS tcQuery
		
		LOCAL lcOwner, ;
		      lcWhere, ;
		      loCA as cCursorAdapter of DataExplorerCA.vcx, ;
		      loException as Exception, ;
		      lcError
		
		IF thisform.DataChanged()
		   RETURN 
		ENDIF   
		
		WAIT "Running Query..." WINDOW NOWAIT 
		
		* If no query passed in, build it
		IF EMPTY(tcQuery)
		   lcOwner = IIF(!EMPTY(this.cOwner), "[" + this.cOwner+ "].", '')
		   lcWhere = IIF(!EMPTY(thisform.edtFilter.Value), "Where " + ALLTRIM(thisform.edtFilter.Value), "")
		   TEXT TO tcQuery TEXTMERGE NOSHOW PRETEXT 1+2
		      SELECT * FROM <<lcOwner>>[<<Thisform.cTable>>] <<lcWhere>>
		   ENDTEXT 
		ENDIF 
		
		* Use CA to query and save changes to data
		TRY 
		   
		   thisform.grdBrowse.RecordSource = SPACE(0)
		   thisform.grdBrowse.SetAll("Picture", SPACE(0), "Header")
		   loCA = thisform.oCA   && for IntelliSense
		   loCA.SelectCmd = tcQuery
		   loCA.BuildSQLSchema()
		   loCA.CursorFill(.T.)
		   thisform.grdBrowse.RecordSource = thisform.cTable
		   
		   * Show filter in title bar
		   thisform.Caption = thisform.cTable + " (" + EVL(ALLTRIM(thisform.edtFilter.Value), "All Records") ;
		      + ") (" + TRANSFORM(RECCOUNT(thisform.cTable)) + " records)"
		
		CATCH TO loException
		   TEXT TO lcError TEXTMERGE NOSHOW PRETEXT 1+2
		      Error peforming query:
		      <<loException.Message>>
		      Program: <<loException.Procedure>>
		      Line: <<loException.LineNo>>
		      Code: <<loException.LineContents>>
		      Query: <<loCA.SelectCmd>>
		   ENDTEXT 
		   
		   MESSAGEBOX(lcError, 0+48, DATAEXPLORER_LOC)
		
		FINALLY 
		   WAIT CLEAR
		   
		ENDTRY
		
		RETURN 
	ENDPROC

	PROCEDURE QueryUnload
		LOCAL llReturnVal
		
		llReturnVal = .T.
		
		IF thisform.DataChanged()
		   IF MESSAGEBOX("Would you like to save your changes?", ;
		                 4+32+256, DATAEXPLORER_LOC) = 6
		      llReturnVal = this.SaveChanges()
		   ELSE
		      NODEFAULT 
		      llReturnVal = .F.
		   ENDIF
		ELSE
		   DODEFAULT()
		ENDIF  
		
		RETURN m.llReturnVal 
	ENDPROC

	PROCEDURE savechanges		&& This method is called to save the changes made in the BROWSE back to the source table.
		* Save changes to data
		LOCAL lnTranMode, ;
		      llReturnVal, ;
		      loException AS Exception
		
		llReturnVal = .T.
		
		*< SET STEP ON
		
		IF this.cDataSource = "sql"
		   * Set transaction mode
		   lnTranMode = SQLGETPROP(this.nSQLHandle, "Transactions")
		   SQLSETPROP(this.nSQLHandle, "Transactions", 2)
		ENDIF 
		
		TRY  
		   IF TABLEUPDATE(.T., .T., this.cTable)
		      * All is good
		      IF this.cDataSource = "sql"
		         SQLCommit(thisform.nSQLHandle)
		      ENDIF 
		   ELSE
		      AERROR(laError)
		      MESSAGEBOX("Your changes could not be saved:" + CHR(13) + laError[2], ;
		                 0+48, DATAEXPLORER_LOC)
		      SQLRollback(thisform.nSQLHandle)
		      llReturnVal = .F.
		   ENDIF
		
		CATCH TO loException
		   MESSAGEBOX("Error when saving data:" + CHR(13) + m.loException.Message, ;
		              0+48, DATAEXPLORER_LOC)
		
		FINALLY 
		   IF this.cDataSource = "sql"
		      * Restore transaction mode
		      SQLSetProp(thisform.nSQLHandle, "Transactions", lnTranMode)
		   ENDIF 
		
		ENDTRY  
		
		RETURN m.llReturnVal
		
	ENDPROC

	PROCEDURE setcolumnsreadonly		&& This method is called after the grid recordsource is set to determine which columns need to be read-only (like autoincrementing integers).
		* This method was added for Sedna. The entire purpose is to make any columns
		* read only if the Visual FoxPro does not allow them to be changed (like an
		* autoincrementing integer column.
		LOCAL lnColumns
		
		#DEFINE ccAFIELDS_AUTOINC_NEXT_VALUE      17
		#DEFINE ccAFIELDS_AUTOINC_STEP            18
		
		DIMENSION laStructure[1]
		
		IF EMPTY(this.grdBrowse.RecordSource)
		   * Nothing to do
		ELSE
		   lnGridColumns  = this.grdBrowse.ColumnCount 
		   lcAlias        = this.grdBrowse.RecordSource
		
		   lnAliasColumns = AFIELDS(laStructure, lcAlias)
		
		   * Check all columns in the grid
		   FOR lnI = 1 TO lnGridColumns
		      lcControlSource = this.grdBrowse.Columns[lnI].ControlSource
		      lcControlSource = JUSTEXT(lcControlSource)
		
		      FOR lnY = 1 TO lnAliasColumns
		         * See if the controlsource is in the structure
		         IF UPPER(laStructure[lnY, 1]) == UPPER(lcControlSource)
		            * See if the column is autoincrementing
		            IF laStructure[lnY, ccAFIELDS_AUTOINC_NEXT_VALUE] > 0
		               this.grdBrowse.Columns[lnI].ReadOnly = .T.
		            ENDIF
		
		            EXIT
		         ENDIF
		      ENDFOR
		   ENDFOR
		ENDIF
		
		RETURN
	ENDPROC

	PROCEDURE setgridextras		&& This method is called to set up the Grid Extras feature set for the main Browse grid.
		this.cusGridExtras.GridExpression = "thisform.grdBrowse"
		this.cusGridExtras.Setup()
		RETURN 
		
	ENDPROC

	PROCEDURE cmdCancel.Click
		thisform.CancelChanges()
		RETURN 
		
	ENDPROC

	PROCEDURE cmdQuery.Click
		thisform.QueryData()
		RETURN 
	ENDPROC

	PROCEDURE cmdSave.Click
		thisform.SaveChanges()
		RETURN 
		
	ENDPROC

	PROCEDURE edtFilter.InteractiveChange
		This.ToolTipText = This.Value
	ENDPROC

	PROCEDURE imgClearFilter.Click
		* Clear filter and requery data
		Thisform.edtFilter.Value = SPACE(0)
		Thisform.QueryData()
		RETURN 
	ENDPROC

ENDDEFINE
